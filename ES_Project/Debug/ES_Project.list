
ES_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003610  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080037a8  080037a8  000137a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b8  080037b8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037c0  080037c0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037c4  080037c4  000137c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080037c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001680  20000014  080037dc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001694  080037dc  00021694  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba89  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e8  00000000  00000000  0002bb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c58  00000000  00000000  0002ddf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000973  00000000  00000000  0002ea50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000173bd  00000000  00000000  0002f3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb14  00000000  00000000  00046780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e14e  00000000  00000000  00056294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000031f4  00000000  00000000  000e43e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e75d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003790 	.word	0x08003790

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08003790 	.word	0x08003790

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <sk9822_send_data>:
#include "global.h"

struct Led_Flag led_flag[12] = {0};

void sk9822_send_data(uint32_t data)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b084      	sub	sp, #16
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	for(uint32_t mask = 0x80000000; mask > 0; mask >>= 1)
 80004dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80004e0:	60fb      	str	r3, [r7, #12]
 80004e2:	e020      	b.n	8000526 <sk9822_send_data+0x52>
	{
	    HAL_GPIO_WritePin(LED_CK_GPIO_Port, LED_CK_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	4813      	ldr	r0, [pc, #76]	; (8000538 <sk9822_send_data+0x64>)
 80004ea:	f001 fabb 	bl	8001a64 <HAL_GPIO_WritePin>
	    asm("nop");
 80004ee:	bf00      	nop
	    asm("nop");
 80004f0:	bf00      	nop
	    if (data & mask) {
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	4013      	ands	r3, r2
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d005      	beq.n	8000508 <sk9822_send_data+0x34>
	      HAL_GPIO_WritePin(LED_DA_GPIO_Port, LED_DA_Pin, GPIO_PIN_SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <sk9822_send_data+0x64>)
 8000502:	f001 faaf 	bl	8001a64 <HAL_GPIO_WritePin>
 8000506:	e004      	b.n	8000512 <sk9822_send_data+0x3e>
	    } else {
	      HAL_GPIO_WritePin(LED_DA_GPIO_Port, LED_DA_Pin, GPIO_PIN_RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2140      	movs	r1, #64	; 0x40
 800050c:	480a      	ldr	r0, [pc, #40]	; (8000538 <sk9822_send_data+0x64>)
 800050e:	f001 faa9 	bl	8001a64 <HAL_GPIO_WritePin>
	    }
	    HAL_GPIO_WritePin(LED_CK_GPIO_Port, LED_CK_Pin, GPIO_PIN_SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	4808      	ldr	r0, [pc, #32]	; (8000538 <sk9822_send_data+0x64>)
 8000518:	f001 faa4 	bl	8001a64 <HAL_GPIO_WritePin>
	    asm("nop");
 800051c:	bf00      	nop
	    asm("nop");
 800051e:	bf00      	nop
	for(uint32_t mask = 0x80000000; mask > 0; mask >>= 1)
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	085b      	lsrs	r3, r3, #1
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1db      	bne.n	80004e4 <sk9822_send_data+0x10>
	}
}
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40020400 	.word	0x40020400

0800053c <sk9822_start_frame>:

void sk9822_start_frame(void) {
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  sk9822_send_data(0);
 8000540:	2000      	movs	r0, #0
 8000542:	f7ff ffc7 	bl	80004d4 <sk9822_send_data>
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}

0800054a <sk9822_stop_frame>:

void sk9822_stop_frame(void) {
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  sk9822_send_data(0xffffffff);
 800054e:	f04f 30ff 	mov.w	r0, #4294967295
 8000552:	f7ff ffbf 	bl	80004d4 <sk9822_send_data>
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}

0800055a <sk9822_gen_data_one_led>:
  gray &= 0x1f;
  tosend = ((0xe0 | gray) << 24) | (b << 16) | (g << 8) | r;
  sk9822_send_data(tosend);
}

uint32_t sk9822_gen_data_one_led(uint8_t gray, uint8_t r, uint8_t g, uint8_t b) {
 800055a:	b490      	push	{r4, r7}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	4604      	mov	r4, r0
 8000562:	4608      	mov	r0, r1
 8000564:	4611      	mov	r1, r2
 8000566:	461a      	mov	r2, r3
 8000568:	4623      	mov	r3, r4
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4603      	mov	r3, r0
 800056e:	71bb      	strb	r3, [r7, #6]
 8000570:	460b      	mov	r3, r1
 8000572:	717b      	strb	r3, [r7, #5]
 8000574:	4613      	mov	r3, r2
 8000576:	713b      	strb	r3, [r7, #4]
  uint32_t tosend;
  gray &= 0x1f;
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f003 031f 	and.w	r3, r3, #31
 800057e:	71fb      	strb	r3, [r7, #7]
  tosend = ((0xe0 | gray) << 24) | (b << 16) | (g << 8) | r;
 8000580:	79fb      	ldrb	r3, [r7, #7]
 8000582:	f063 031f 	orn	r3, r3, #31
 8000586:	b2db      	uxtb	r3, r3
 8000588:	061a      	lsls	r2, r3, #24
 800058a:	793b      	ldrb	r3, [r7, #4]
 800058c:	041b      	lsls	r3, r3, #16
 800058e:	431a      	orrs	r2, r3
 8000590:	797b      	ldrb	r3, [r7, #5]
 8000592:	021b      	lsls	r3, r3, #8
 8000594:	431a      	orrs	r2, r3
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	4313      	orrs	r3, r2
 800059a:	60fb      	str	r3, [r7, #12]
  return tosend;
 800059c:	68fb      	ldr	r3, [r7, #12]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc90      	pop	{r4, r7}
 80005a6:	4770      	bx	lr

080005a8 <sk9822_data_one_led_at_position>:

void sk9822_data_one_led_at_position(uint32_t color, int position)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	6039      	str	r1, [r7, #0]
	led_flag[position].flag = 1;
 80005b2:	4a29      	ldr	r2, [pc, #164]	; (8000658 <sk9822_data_one_led_at_position+0xb0>)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2101      	movs	r1, #1
 80005b8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	led_flag[position].color = color;
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <sk9822_data_one_led_at_position+0xb0>)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	4413      	add	r3, r2
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	605a      	str	r2, [r3, #4]
	sk9822_start_frame();
 80005c8:	f7ff ffb8 	bl	800053c <sk9822_start_frame>
	for(int i = 0; i < position;i++)
 80005cc:	2300      	movs	r3, #0
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	e016      	b.n	8000600 <sk9822_data_one_led_at_position+0x58>
	{
		if(led_flag[i].flag == 1)
 80005d2:	4a21      	ldr	r2, [pc, #132]	; (8000658 <sk9822_data_one_led_at_position+0xb0>)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d108      	bne.n	80005f0 <sk9822_data_one_led_at_position+0x48>
		{
			sk9822_send_data(led_flag[i].color);
 80005de:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <sk9822_data_one_led_at_position+0xb0>)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	00db      	lsls	r3, r3, #3
 80005e4:	4413      	add	r3, r2
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	4618      	mov	r0, r3
 80005ea:	f7ff ff73 	bl	80004d4 <sk9822_send_data>
 80005ee:	e004      	b.n	80005fa <sk9822_data_one_led_at_position+0x52>
		}
		else
		{
			sk9822_send_data(gray[0]);
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <sk9822_data_one_led_at_position+0xb4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff ff6d 	bl	80004d4 <sk9822_send_data>
	for(int i = 0; i < position;i++)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	3301      	adds	r3, #1
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	68fa      	ldr	r2, [r7, #12]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	dbe4      	blt.n	80005d2 <sk9822_data_one_led_at_position+0x2a>
		}
	}
	sk9822_send_data(color);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff63 	bl	80004d4 <sk9822_send_data>
	for(int i = position + 1; i < LED_NUM;i++)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	60bb      	str	r3, [r7, #8]
 8000614:	e016      	b.n	8000644 <sk9822_data_one_led_at_position+0x9c>
	{
		if(led_flag[i].flag == 1)
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <sk9822_data_one_led_at_position+0xb0>)
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d108      	bne.n	8000634 <sk9822_data_one_led_at_position+0x8c>
		{
			sk9822_send_data(led_flag[i].color);
 8000622:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <sk9822_data_one_led_at_position+0xb0>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	00db      	lsls	r3, r3, #3
 8000628:	4413      	add	r3, r2
 800062a:	685b      	ldr	r3, [r3, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ff51 	bl	80004d4 <sk9822_send_data>
 8000632:	e004      	b.n	800063e <sk9822_data_one_led_at_position+0x96>
		}
		else
		{
			sk9822_send_data(gray[0]);
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <sk9822_data_one_led_at_position+0xb4>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff4b 	bl	80004d4 <sk9822_send_data>
	for(int i = position + 1; i < LED_NUM;i++)
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	3301      	adds	r3, #1
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	2b0b      	cmp	r3, #11
 8000648:	dde5      	ble.n	8000616 <sk9822_data_one_led_at_position+0x6e>
		}
	}
	sk9822_stop_frame();
 800064a:	f7ff ff7e 	bl	800054a <sk9822_stop_frame>

}
 800064e:	bf00      	nop
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000030 	.word	0x20000030
 800065c:	20000c90 	.word	0x20000c90

08000660 <sk9822_data_all_led>:

void sk9822_data_all_led(uint32_t color)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	sk9822_start_frame();
 8000668:	f7ff ff68 	bl	800053c <sk9822_start_frame>
	for(int i = 0; i < LED_NUM; i++)
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	e005      	b.n	800067e <sk9822_data_all_led+0x1e>
	{
		sk9822_send_data(color);
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff2e 	bl	80004d4 <sk9822_send_data>
	for(int i = 0; i < LED_NUM; i++)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	3301      	adds	r3, #1
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b0b      	cmp	r3, #11
 8000682:	ddf6      	ble.n	8000672 <sk9822_data_all_led+0x12>
	}
	sk9822_stop_frame();
 8000684:	f7ff ff61 	bl	800054a <sk9822_stop_frame>
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <color_init>:
uint32_t blue[BIT_8] = {0};
uint32_t gray[BIT_8] = {0};
uint32_t gray_5[BIT_8] = {0};

void color_init()
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	for(int i = 0; i < BIT_8; i++)
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e007      	b.n	80006ac <color_init+0x1c>
	{
		gray_5[i] = i;
 800069c:	687a      	ldr	r2, [r7, #4]
 800069e:	4928      	ldr	r1, [pc, #160]	; (8000740 <color_init+0xb0>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < BIT_8; i++)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	3301      	adds	r3, #1
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2bff      	cmp	r3, #255	; 0xff
 80006b0:	ddf4      	ble.n	800069c <color_init+0xc>
	}
	for(int i = 0;i < BIT_8; i++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	e03b      	b.n	8000730 <color_init+0xa0>
	{
		red[i] = sk9822_gen_data_one_led(gray_5[18], i, 0, 0);
 80006b8:	4b21      	ldr	r3, [pc, #132]	; (8000740 <color_init+0xb0>)
 80006ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006bc:	b2d8      	uxtb	r0, r3
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2d9      	uxtb	r1, r3
 80006c2:	2300      	movs	r3, #0
 80006c4:	2200      	movs	r2, #0
 80006c6:	f7ff ff48 	bl	800055a <sk9822_gen_data_one_led>
 80006ca:	4602      	mov	r2, r0
 80006cc:	491d      	ldr	r1, [pc, #116]	; (8000744 <color_init+0xb4>)
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		green[i] = sk9822_gen_data_one_led(gray_5[18], 0, i, 0);
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <color_init+0xb0>)
 80006d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006d8:	b2d8      	uxtb	r0, r3
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	2300      	movs	r3, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	f7ff ff3a 	bl	800055a <sk9822_gen_data_one_led>
 80006e6:	4602      	mov	r2, r0
 80006e8:	4917      	ldr	r1, [pc, #92]	; (8000748 <color_init+0xb8>)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		blue[i] = sk9822_gen_data_one_led(gray_5[18], 0, 0, i);
 80006f0:	4b13      	ldr	r3, [pc, #76]	; (8000740 <color_init+0xb0>)
 80006f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006f4:	b2d8      	uxtb	r0, r3
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2200      	movs	r2, #0
 80006fc:	2100      	movs	r1, #0
 80006fe:	f7ff ff2c 	bl	800055a <sk9822_gen_data_one_led>
 8000702:	4602      	mov	r2, r0
 8000704:	4911      	ldr	r1, [pc, #68]	; (800074c <color_init+0xbc>)
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		gray[i] = sk9822_gen_data_one_led(i, i, i, i);
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	b2d8      	uxtb	r0, r3
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	b2d9      	uxtb	r1, r3
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	b2db      	uxtb	r3, r3
 800071c:	f7ff ff1d 	bl	800055a <sk9822_gen_data_one_led>
 8000720:	4602      	mov	r2, r0
 8000722:	490b      	ldr	r1, [pc, #44]	; (8000750 <color_init+0xc0>)
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0;i < BIT_8; i++)
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	2bff      	cmp	r3, #255	; 0xff
 8000734:	ddc0      	ble.n	80006b8 <color_init+0x28>
	}
}
 8000736:	bf00      	nop
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20001090 	.word	0x20001090
 8000744:	20000090 	.word	0x20000090
 8000748:	20000490 	.word	0x20000490
 800074c:	20000890 	.word	0x20000890
 8000750:	20000c90 	.word	0x20000c90

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000758:	f000 fe7c 	bl	8001454 <HAL_Init>

  /* USER CODE BEGIN Init */
  test_init();
 800075c:	f000 fc0e 	bl	8000f7c <test_init>
  color_init();
 8000760:	f7ff ff96 	bl	8000690 <color_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f81a 	bl	800079c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000768:	f000 f886 	bl	8000878 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f000 f9a8 	bl	8000ac0 <MX_GPIO_Init>
  MX_I2S1_Init();
 8000770:	f000 f8a2 	bl	80008b8 <MX_I2S1_Init>
  MX_I2S2_Init();
 8000774:	f000 f8ce 	bl	8000914 <MX_I2S2_Init>
  MX_I2S4_Init();
 8000778:	f000 f8fa 	bl	8000970 <MX_I2S4_Init>
  MX_I2S5_Init();
 800077c:	f000 f926 	bl	80009cc <MX_I2S5_Init>
  MX_TIM2_Init();
 8000780:	f000 f952 	bl	8000a28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <main+0x44>)
 8000786:	f002 fbed 	bl	8002f64 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  test_init();
 800078a:	f000 fbf7 	bl	8000f7c <test_init>
  while (1)
  {
	  test_RGB();
 800078e:	f000 fddb 	bl	8001348 <test_RGB>
	  //test_led_array();
	  clock_led();
 8000792:	f000 fd9d 	bl	80012d0 <clock_led>
	  test_RGB();
 8000796:	e7fa      	b.n	800078e <main+0x3a>
 8000798:	200015b0 	.word	0x200015b0

0800079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b094      	sub	sp, #80	; 0x50
 80007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a2:	f107 0320 	add.w	r3, r7, #32
 80007a6:	2230      	movs	r2, #48	; 0x30
 80007a8:	2100      	movs	r1, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 ffc4 	bl	8003738 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(16);
 80007c0:	4b2b      	ldr	r3, [pc, #172]	; (8000870 <SystemClock_Config+0xd4>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80007c8:	4a29      	ldr	r2, [pc, #164]	; (8000870 <SystemClock_Config+0xd4>)
 80007ca:	f043 0310 	orr.w	r3, r3, #16
 80007ce:	6053      	str	r3, [r2, #4]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 80007d0:	4b27      	ldr	r3, [pc, #156]	; (8000870 <SystemClock_Config+0xd4>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4a26      	ldr	r2, [pc, #152]	; (8000870 <SystemClock_Config+0xd4>)
 80007d6:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80007da:	6053      	str	r3, [r2, #4]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <SystemClock_Config+0xd4>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a22      	ldr	r2, [pc, #136]	; (8000870 <SystemClock_Config+0xd4>)
 80007e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b20      	ldr	r3, [pc, #128]	; (8000870 <SystemClock_Config+0xd4>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <SystemClock_Config+0xd8>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a1c      	ldr	r2, [pc, #112]	; (8000874 <SystemClock_Config+0xd8>)
 8000802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000806:	6013      	str	r3, [r2, #0]
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <SystemClock_Config+0xd8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081c:	2310      	movs	r3, #16
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000820:	2300      	movs	r3, #0
 8000822:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000828:	f107 0320 	add.w	r3, r7, #32
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fdd3 	bl	80023d8 <HAL_RCC_OscConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000838:	f000 f98e 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000840:	2300      	movs	r3, #0
 8000842:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f002 f836 	bl	80028c8 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000862:	f000 f979 	bl	8000b58 <Error_Handler>
  }
}
 8000866:	bf00      	nop
 8000868:	3750      	adds	r7, #80	; 0x50
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800
 8000874:	40007000 	.word	0x40007000

08000878 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800087e:	463b      	mov	r3, r7
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800088e:	2301      	movs	r3, #1
 8000890:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000892:	23c0      	movs	r3, #192	; 0xc0
 8000894:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 8000896:	2310      	movs	r3, #16
 8000898:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800089a:	2302      	movs	r3, #2
 800089c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 f9bd 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80008ac:	f000 f954 	bl	8000b58 <Error_Handler>
  }
}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <MX_I2S1_Init>:
  * @brief I2S1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S1_Init 0 */

  /* USER CODE BEGIN I2S1_Init 1 */

  /* USER CODE END I2S1_Init 1 */
  hi2s1.Instance = SPI1;
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_I2S1_Init+0x54>)
 80008be:	4a14      	ldr	r2, [pc, #80]	; (8000910 <MX_I2S1_Init+0x58>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2s1.Init.Mode = I2S_MODE_MASTER_TX;
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_I2S1_Init+0x54>)
 80008c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c8:	605a      	str	r2, [r3, #4]
  hi2s1.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <MX_I2S1_Init+0x54>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hi2s1.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <MX_I2S1_Init+0x54>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hi2s1.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <MX_I2S1_Init+0x54>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hi2s1.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	; (800090c <MX_I2S1_Init+0x54>)
 80008de:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80008e2:	615a      	str	r2, [r3, #20]
  hi2s1.Init.CPOL = I2S_CPOL_LOW;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_I2S1_Init+0x54>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hi2s1.Init.ClockSource = I2S_CLOCK_PLL;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_I2S1_Init+0x54>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hi2s1.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_I2S1_Init+0x54>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s1) != HAL_OK)
 80008f6:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_I2S1_Init+0x54>)
 80008f8:	f001 f8ce 	bl	8001a98 <HAL_I2S_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2S1_Init+0x4e>
  {
    Error_Handler();
 8000902:	f000 f929 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S1_Init 2 */

  /* USER CODE END I2S1_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20001490 	.word	0x20001490
 8000910:	40013000 	.word	0x40013000

08000914 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000918:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_I2S2_Init+0x54>)
 800091a:	4a14      	ldr	r2, [pc, #80]	; (800096c <MX_I2S2_Init+0x58>)
 800091c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800091e:	4b12      	ldr	r3, [pc, #72]	; (8000968 <MX_I2S2_Init+0x54>)
 8000920:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000924:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_I2S2_Init+0x54>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_I2S2_Init+0x54>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <MX_I2S2_Init+0x54>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000938:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_I2S2_Init+0x54>)
 800093a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800093e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_I2S2_Init+0x54>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_I2S2_Init+0x54>)
 8000948:	2200      	movs	r2, #0
 800094a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_I2S2_Init+0x54>)
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_I2S2_Init+0x54>)
 8000954:	f001 f8a0 	bl	8001a98 <HAL_I2S_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800095e:	f000 f8fb 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200014d8 	.word	0x200014d8
 800096c:	40003800 	.word	0x40003800

08000970 <MX_I2S4_Init>:
  * @brief I2S4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S4_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE END I2S4_Init 0 */

  /* USER CODE BEGIN I2S4_Init 1 */

  /* USER CODE END I2S4_Init 1 */
  hi2s4.Instance = SPI4;
 8000974:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_I2S4_Init+0x54>)
 8000976:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <MX_I2S4_Init+0x58>)
 8000978:	601a      	str	r2, [r3, #0]
  hi2s4.Init.Mode = I2S_MODE_MASTER_TX;
 800097a:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_I2S4_Init+0x54>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	605a      	str	r2, [r3, #4]
  hi2s4.Init.Standard = I2S_STANDARD_PHILIPS;
 8000982:	4b10      	ldr	r3, [pc, #64]	; (80009c4 <MX_I2S4_Init+0x54>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
  hi2s4.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_I2S4_Init+0x54>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
  hi2s4.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800098e:	4b0d      	ldr	r3, [pc, #52]	; (80009c4 <MX_I2S4_Init+0x54>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
  hi2s4.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_I2S4_Init+0x54>)
 8000996:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800099a:	615a      	str	r2, [r3, #20]
  hi2s4.Init.CPOL = I2S_CPOL_LOW;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_I2S4_Init+0x54>)
 800099e:	2200      	movs	r2, #0
 80009a0:	619a      	str	r2, [r3, #24]
  hi2s4.Init.ClockSource = I2S_CLOCK_PLL;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_I2S4_Init+0x54>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
  hi2s4.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_I2S4_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s4) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_I2S4_Init+0x54>)
 80009b0:	f001 f872 	bl	8001a98 <HAL_I2S_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_I2S4_Init+0x4e>
  {
    Error_Handler();
 80009ba:	f000 f8cd 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S4_Init 2 */

  /* USER CODE END I2S4_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20001520 	.word	0x20001520
 80009c8:	40013400 	.word	0x40013400

080009cc <MX_I2S5_Init>:
  * @brief I2S5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S5_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2S5_Init 0 */

  /* USER CODE BEGIN I2S5_Init 1 */

  /* USER CODE END I2S5_Init 1 */
  hi2s5.Instance = SPI5;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_I2S5_Init+0x54>)
 80009d2:	4a14      	ldr	r2, [pc, #80]	; (8000a24 <MX_I2S5_Init+0x58>)
 80009d4:	601a      	str	r2, [r3, #0]
  hi2s5.Init.Mode = I2S_MODE_MASTER_TX;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_I2S5_Init+0x54>)
 80009d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009dc:	605a      	str	r2, [r3, #4]
  hi2s5.Init.Standard = I2S_STANDARD_PHILIPS;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_I2S5_Init+0x54>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  hi2s5.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_I2S5_Init+0x54>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
  hi2s5.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_I2S5_Init+0x54>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
  hi2s5.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_I2S5_Init+0x54>)
 80009f2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80009f6:	615a      	str	r2, [r3, #20]
  hi2s5.Init.CPOL = I2S_CPOL_LOW;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_I2S5_Init+0x54>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2s5.Init.ClockSource = I2S_CLOCK_PLL;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_I2S5_Init+0x54>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2s5.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_I2S5_Init+0x54>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s5) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_I2S5_Init+0x54>)
 8000a0c:	f001 f844 	bl	8001a98 <HAL_I2S_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2S5_Init+0x4e>
  {
    Error_Handler();
 8000a16:	f000 f89f 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN I2S5_Init 2 */

  /* USER CODE END I2S5_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20001568 	.word	0x20001568
 8000a24:	40015000 	.word	0x40015000

08000a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000 - 1;
 8000a4c:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a4e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000a52:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10 - 1;
 8000a5a:	4b18      	ldr	r3, [pc, #96]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6c:	4813      	ldr	r0, [pc, #76]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a6e:	f002 fa29 	bl	8002ec4 <HAL_TIM_Base_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a78:	f000 f86e 	bl	8000b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a80:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a82:	f107 0308 	add.w	r3, r7, #8
 8000a86:	4619      	mov	r1, r3
 8000a88:	480c      	ldr	r0, [pc, #48]	; (8000abc <MX_TIM2_Init+0x94>)
 8000a8a:	f002 fbbd 	bl	8003208 <HAL_TIM_ConfigClockSource>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000a94:	f000 f860 	bl	8000b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa0:	463b      	mov	r3, r7
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_TIM2_Init+0x94>)
 8000aa6:	f002 fdc5 	bl	8003634 <HAL_TIMEx_MasterConfigSynchronization>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f000 f852 	bl	8000b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	3718      	adds	r7, #24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200015b0 	.word	0x200015b0

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60bb      	str	r3, [r7, #8]
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_GPIO_Init+0x7c>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a17      	ldr	r2, [pc, #92]	; (8000b3c <MX_GPIO_Init+0x7c>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_GPIO_Init+0x7c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b11      	ldr	r3, [pc, #68]	; (8000b3c <MX_GPIO_Init+0x7c>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a10      	ldr	r2, [pc, #64]	; (8000b3c <MX_GPIO_Init+0x7c>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_GPIO_Init+0x7c>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, led_red_Pin|led_green_Pin|led_blue_Pin|LED_DA_Pin
 8000b0e:	2200      	movs	r2, #0
 8000b10:	21f8      	movs	r1, #248	; 0xf8
 8000b12:	480b      	ldr	r0, [pc, #44]	; (8000b40 <MX_GPIO_Init+0x80>)
 8000b14:	f000 ffa6 	bl	8001a64 <HAL_GPIO_WritePin>
                          |LED_CK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : led_red_Pin led_green_Pin led_blue_Pin LED_DA_Pin
                           LED_CK_Pin */
  GPIO_InitStruct.Pin = led_red_Pin|led_green_Pin|led_blue_Pin|LED_DA_Pin
 8000b18:	23f8      	movs	r3, #248	; 0xf8
 8000b1a:	60fb      	str	r3, [r7, #12]
                          |LED_CK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_GPIO_Init+0x80>)
 8000b30:	f000 fe14 	bl	800175c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40020400 	.word	0x40020400

08000b44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	Run_timer();
 8000b4c:	f000 f82c 	bl	8000ba8 <Run_timer>
	//getKeyInput();
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <Error_Handler+0x8>
	...

08000b64 <Set_timer>:
		0, 0, 0, 0, 0, 0,
		0, 0, 0, 0, 0, 0};


void Set_timer(int duration, int arr_pos)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
	timer_counter[arr_pos] = duration/10;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <Set_timer+0x38>)
 8000b72:	fb82 1203 	smull	r1, r2, r2, r3
 8000b76:	1092      	asrs	r2, r2, #2
 8000b78:	17db      	asrs	r3, r3, #31
 8000b7a:	1ad2      	subs	r2, r2, r3
 8000b7c:	4908      	ldr	r1, [pc, #32]	; (8000ba0 <Set_timer+0x3c>)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[arr_pos] = 0;
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <Set_timer+0x40>)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	66666667 	.word	0x66666667
 8000ba0:	200015f8 	.word	0x200015f8
 8000ba4:	20001640 	.word	0x20001640

08000ba8 <Run_timer>:

void Run_timer()
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
	int i = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
	while(i < timer_arr_size)
 8000bb2:	e01c      	b.n	8000bee <Run_timer+0x46>
	{
		if(timer_counter[i] > 0)
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <Run_timer+0x5c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	dd13      	ble.n	8000be8 <Run_timer+0x40>
		{
			timer_counter[i]--;
 8000bc0:	4a10      	ldr	r2, [pc, #64]	; (8000c04 <Run_timer+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	1e5a      	subs	r2, r3, #1
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <Run_timer+0x5c>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(timer_counter[i] <= 0)
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <Run_timer+0x5c>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	dc04      	bgt.n	8000be8 <Run_timer+0x40>
			{
				timer_flag[i] = 1;
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <Run_timer+0x60>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	2101      	movs	r1, #1
 8000be4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			}
		}
		i++;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3301      	adds	r3, #1
 8000bec:	607b      	str	r3, [r7, #4]
	while(i < timer_arr_size)
 8000bee:	2212      	movs	r2, #18
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	dbde      	blt.n	8000bb4 <Run_timer+0xc>
	}
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	200015f8 	.word	0x200015f8
 8000c08:	20001640 	.word	0x20001640

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c20:	6453      	str	r3, [r2, #68]	; 0x44
 8000c22:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	603b      	str	r3, [r7, #0]
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	4a08      	ldr	r2, [pc, #32]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_MspInit+0x4c>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c46:	603b      	str	r3, [r7, #0]
 8000c48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b092      	sub	sp, #72	; 0x48
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a83      	ldr	r2, [pc, #524]	; (8000e88 <HAL_I2S_MspInit+0x22c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d12c      	bne.n	8000cd8 <HAL_I2S_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	633b      	str	r3, [r7, #48]	; 0x30
 8000c82:	4b82      	ldr	r3, [pc, #520]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a81      	ldr	r2, [pc, #516]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b7f      	ldr	r3, [pc, #508]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
 8000c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9e:	4b7b      	ldr	r3, [pc, #492]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a7a      	ldr	r2, [pc, #488]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b78      	ldr	r3, [pc, #480]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2S1 GPIO Configuration
    PA4     ------> I2S1_WS
    PA5     ------> I2S1_CK
    PA7     ------> I2S1_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000cb6:	23b0      	movs	r3, #176	; 0xb0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cce:	4619      	mov	r1, r3
 8000cd0:	486f      	ldr	r0, [pc, #444]	; (8000e90 <HAL_I2S_MspInit+0x234>)
 8000cd2:	f000 fd43 	bl	800175c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000cd6:	e0d3      	b.n	8000e80 <HAL_I2S_MspInit+0x224>
  else if(hi2s->Instance==SPI2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a6d      	ldr	r2, [pc, #436]	; (8000e94 <HAL_I2S_MspInit+0x238>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12d      	bne.n	8000d3e <HAL_I2S_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce6:	4b69      	ldr	r3, [pc, #420]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a68      	ldr	r2, [pc, #416]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
 8000d02:	4b62      	ldr	r3, [pc, #392]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a61      	ldr	r2, [pc, #388]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b5f      	ldr	r3, [pc, #380]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	627b      	str	r3, [r7, #36]	; 0x24
 8000d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15|GPIO_PIN_9;
 8000d1a:	f44f 4306 	mov.w	r3, #34304	; 0x8600
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d2c:	2305      	movs	r3, #5
 8000d2e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d34:	4619      	mov	r1, r3
 8000d36:	4858      	ldr	r0, [pc, #352]	; (8000e98 <HAL_I2S_MspInit+0x23c>)
 8000d38:	f000 fd10 	bl	800175c <HAL_GPIO_Init>
}
 8000d3c:	e0a0      	b.n	8000e80 <HAL_I2S_MspInit+0x224>
  else if(hi2s->Instance==SPI4)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a56      	ldr	r2, [pc, #344]	; (8000e9c <HAL_I2S_MspInit+0x240>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d14b      	bne.n	8000de0 <HAL_I2S_MspInit+0x184>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
 8000d4c:	4b4f      	ldr	r3, [pc, #316]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d50:	4a4e      	ldr	r2, [pc, #312]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d52:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d56:	6453      	str	r3, [r2, #68]	; 0x44
 8000d58:	4b4c      	ldr	r3, [pc, #304]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d60:	623b      	str	r3, [r7, #32]
 8000d62:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	61fb      	str	r3, [r7, #28]
 8000d68:	4b48      	ldr	r3, [pc, #288]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a47      	ldr	r2, [pc, #284]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b45      	ldr	r3, [pc, #276]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	4b41      	ldr	r3, [pc, #260]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	4a40      	ldr	r2, [pc, #256]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d8a:	f043 0302 	orr.w	r3, r3, #2
 8000d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	f003 0302 	and.w	r3, r3, #2
 8000d98:	61bb      	str	r3, [r7, #24]
 8000d9a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da0:	2302      	movs	r3, #2
 8000da2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2300      	movs	r3, #0
 8000daa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000dac:	2305      	movs	r3, #5
 8000dae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000db4:	4619      	mov	r1, r3
 8000db6:	4836      	ldr	r0, [pc, #216]	; (8000e90 <HAL_I2S_MspInit+0x234>)
 8000db8:	f000 fcd0 	bl	800175c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000dbc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dc0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8000dce:	2306      	movs	r3, #6
 8000dd0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	482f      	ldr	r0, [pc, #188]	; (8000e98 <HAL_I2S_MspInit+0x23c>)
 8000dda:	f000 fcbf 	bl	800175c <HAL_GPIO_Init>
}
 8000dde:	e04f      	b.n	8000e80 <HAL_I2S_MspInit+0x224>
  else if(hi2s->Instance==SPI5)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a2e      	ldr	r2, [pc, #184]	; (8000ea0 <HAL_I2S_MspInit+0x244>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d14a      	bne.n	8000e80 <HAL_I2S_MspInit+0x224>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df2:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000df8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e02:	617b      	str	r3, [r7, #20]
 8000e04:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b20      	ldr	r3, [pc, #128]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a1f      	ldr	r2, [pc, #124]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b1d      	ldr	r3, [pc, #116]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_I2S_MspInit+0x230>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e52:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e56:	4619      	mov	r1, r3
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <HAL_I2S_MspInit+0x23c>)
 8000e5a:	f000 fc7f 	bl	800175c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000e70:	2306      	movs	r3, #6
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <HAL_I2S_MspInit+0x234>)
 8000e7c:	f000 fc6e 	bl	800175c <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3748      	adds	r7, #72	; 0x48
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40003800 	.word	0x40003800
 8000e98:	40020400 	.word	0x40020400
 8000e9c:	40013400 	.word	0x40013400
 8000ea0:	40015000 	.word	0x40015000

08000ea4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb4:	d115      	bne.n	8000ee2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_TIM_Base_MspInit+0x48>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	201c      	movs	r0, #28
 8000ed8:	f000 fc09 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000edc:	201c      	movs	r0, #28
 8000ede:	f000 fc22 	bl	8001726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023800 	.word	0x40023800

08000ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <NMI_Handler+0x4>

08000ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <MemManage_Handler+0x4>

08000f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <BusFault_Handler+0x4>

08000f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <UsageFault_Handler+0x4>

08000f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f3c:	f000 fadc 	bl	80014f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM2_IRQHandler+0x10>)
 8000f4a:	f002 f86d 	bl	8003028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200015b0 	.word	0x200015b0

08000f58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <SystemInit+0x20>)
 8000f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <SystemInit+0x20>)
 8000f64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <test_init>:
int second = 15;
int minute = 15;
int hour = 0;

void test_init()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
	Set_timer(1000, 0);
 8000f80:	2100      	movs	r1, #0
 8000f82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f86:	f7ff fded 	bl	8000b64 <Set_timer>
	Set_timer(1000, 1);
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f90:	f7ff fde8 	bl	8000b64 <Set_timer>
	Set_timer(1000, 2);
 8000f94:	2102      	movs	r1, #2
 8000f96:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f9a:	f7ff fde3 	bl	8000b64 <Set_timer>
	HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	480a      	ldr	r0, [pc, #40]	; (8000fcc <test_init+0x50>)
 8000fa4:	f000 fd5e 	bl	8001a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2110      	movs	r1, #16
 8000fac:	4807      	ldr	r0, [pc, #28]	; (8000fcc <test_init+0x50>)
 8000fae:	f000 fd59 	bl	8001a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2120      	movs	r1, #32
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <test_init+0x50>)
 8000fb8:	f000 fd54 	bl	8001a64 <HAL_GPIO_WritePin>
	sk9822_data_all_led(gray[0]);
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <test_init+0x54>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff fb4d 	bl	8000660 <sk9822_data_all_led>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	20000c90 	.word	0x20000c90

08000fd4 <led_clock_display>:
void test_i2s()
{

}
void led_clock_display()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
	int h = hour/12;
 8000fda:	4bb3      	ldr	r3, [pc, #716]	; (80012a8 <led_clock_display+0x2d4>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4ab3      	ldr	r2, [pc, #716]	; (80012ac <led_clock_display+0x2d8>)
 8000fe0:	fb82 1203 	smull	r1, r2, r2, r3
 8000fe4:	1052      	asrs	r2, r2, #1
 8000fe6:	17db      	asrs	r3, r3, #31
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	61fb      	str	r3, [r7, #28]
	int m = minute/5;
 8000fec:	4bb0      	ldr	r3, [pc, #704]	; (80012b0 <led_clock_display+0x2dc>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4ab0      	ldr	r2, [pc, #704]	; (80012b4 <led_clock_display+0x2e0>)
 8000ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff6:	1052      	asrs	r2, r2, #1
 8000ff8:	17db      	asrs	r3, r3, #31
 8000ffa:	1ad3      	subs	r3, r2, r3
 8000ffc:	61bb      	str	r3, [r7, #24]
	int s = second/5;
 8000ffe:	4bae      	ldr	r3, [pc, #696]	; (80012b8 <led_clock_display+0x2e4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4aac      	ldr	r2, [pc, #688]	; (80012b4 <led_clock_display+0x2e0>)
 8001004:	fb82 1203 	smull	r1, r2, r2, r3
 8001008:	1052      	asrs	r2, r2, #1
 800100a:	17db      	asrs	r3, r3, #31
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]
	led_flag[hour/12].flag = 1;
 8001010:	4ba5      	ldr	r3, [pc, #660]	; (80012a8 <led_clock_display+0x2d4>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4aa5      	ldr	r2, [pc, #660]	; (80012ac <led_clock_display+0x2d8>)
 8001016:	fb82 1203 	smull	r1, r2, r2, r3
 800101a:	1052      	asrs	r2, r2, #1
 800101c:	17db      	asrs	r3, r3, #31
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	4aa6      	ldr	r2, [pc, #664]	; (80012bc <led_clock_display+0x2e8>)
 8001022:	2101      	movs	r1, #1
 8001024:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	led_flag[minute/5].flag = 1;
 8001028:	4ba1      	ldr	r3, [pc, #644]	; (80012b0 <led_clock_display+0x2dc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4aa1      	ldr	r2, [pc, #644]	; (80012b4 <led_clock_display+0x2e0>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1052      	asrs	r2, r2, #1
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	4aa0      	ldr	r2, [pc, #640]	; (80012bc <led_clock_display+0x2e8>)
 800103a:	2101      	movs	r1, #1
 800103c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	led_flag[second/5].flag = 1;
 8001040:	4b9d      	ldr	r3, [pc, #628]	; (80012b8 <led_clock_display+0x2e4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a9b      	ldr	r2, [pc, #620]	; (80012b4 <led_clock_display+0x2e0>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	1052      	asrs	r2, r2, #1
 800104c:	17db      	asrs	r3, r3, #31
 800104e:	1ad3      	subs	r3, r2, r3
 8001050:	4a9a      	ldr	r2, [pc, #616]	; (80012bc <led_clock_display+0x2e8>)
 8001052:	2101      	movs	r1, #1
 8001054:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

	uint32_t mix_color_hm = sk9822_gen_data_one_led(gray_5[18], 30, 30, 0);
 8001058:	4b99      	ldr	r3, [pc, #612]	; (80012c0 <led_clock_display+0x2ec>)
 800105a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800105c:	b2d8      	uxtb	r0, r3
 800105e:	2300      	movs	r3, #0
 8001060:	221e      	movs	r2, #30
 8001062:	211e      	movs	r1, #30
 8001064:	f7ff fa79 	bl	800055a <sk9822_gen_data_one_led>
 8001068:	6138      	str	r0, [r7, #16]
	uint32_t mix_color_hs = sk9822_gen_data_one_led(gray_5[18], 30, 0, 30);
 800106a:	4b95      	ldr	r3, [pc, #596]	; (80012c0 <led_clock_display+0x2ec>)
 800106c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800106e:	b2d8      	uxtb	r0, r3
 8001070:	231e      	movs	r3, #30
 8001072:	2200      	movs	r2, #0
 8001074:	211e      	movs	r1, #30
 8001076:	f7ff fa70 	bl	800055a <sk9822_gen_data_one_led>
 800107a:	60f8      	str	r0, [r7, #12]
	uint32_t mix_color_ms = sk9822_gen_data_one_led(gray_5[18], 0, 30, 30);
 800107c:	4b90      	ldr	r3, [pc, #576]	; (80012c0 <led_clock_display+0x2ec>)
 800107e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001080:	b2d8      	uxtb	r0, r3
 8001082:	231e      	movs	r3, #30
 8001084:	221e      	movs	r2, #30
 8001086:	2100      	movs	r1, #0
 8001088:	f7ff fa67 	bl	800055a <sk9822_gen_data_one_led>
 800108c:	60b8      	str	r0, [r7, #8]
	uint32_t mix_color_hms = sk9822_gen_data_one_led(gray_5[18], 30, 30, 30);
 800108e:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <led_clock_display+0x2ec>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001092:	b2d8      	uxtb	r0, r3
 8001094:	231e      	movs	r3, #30
 8001096:	221e      	movs	r2, #30
 8001098:	211e      	movs	r1, #30
 800109a:	f7ff fa5e 	bl	800055a <sk9822_gen_data_one_led>
 800109e:	6078      	str	r0, [r7, #4]

	if(hour/12 == minute/5 && hour/12 == second/5)
 80010a0:	4b81      	ldr	r3, [pc, #516]	; (80012a8 <led_clock_display+0x2d4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a81      	ldr	r2, [pc, #516]	; (80012ac <led_clock_display+0x2d8>)
 80010a6:	fb82 1203 	smull	r1, r2, r2, r3
 80010aa:	1052      	asrs	r2, r2, #1
 80010ac:	17db      	asrs	r3, r3, #31
 80010ae:	1ad2      	subs	r2, r2, r3
 80010b0:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <led_clock_display+0x2dc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	497f      	ldr	r1, [pc, #508]	; (80012b4 <led_clock_display+0x2e0>)
 80010b6:	fb81 0103 	smull	r0, r1, r1, r3
 80010ba:	1049      	asrs	r1, r1, #1
 80010bc:	17db      	asrs	r3, r3, #31
 80010be:	1acb      	subs	r3, r1, r3
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d11e      	bne.n	8001102 <led_clock_display+0x12e>
 80010c4:	4b78      	ldr	r3, [pc, #480]	; (80012a8 <led_clock_display+0x2d4>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a78      	ldr	r2, [pc, #480]	; (80012ac <led_clock_display+0x2d8>)
 80010ca:	fb82 1203 	smull	r1, r2, r2, r3
 80010ce:	1052      	asrs	r2, r2, #1
 80010d0:	17db      	asrs	r3, r3, #31
 80010d2:	1ad2      	subs	r2, r2, r3
 80010d4:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <led_clock_display+0x2e4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4976      	ldr	r1, [pc, #472]	; (80012b4 <led_clock_display+0x2e0>)
 80010da:	fb81 0103 	smull	r0, r1, r1, r3
 80010de:	1049      	asrs	r1, r1, #1
 80010e0:	17db      	asrs	r3, r3, #31
 80010e2:	1acb      	subs	r3, r1, r3
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d10c      	bne.n	8001102 <led_clock_display+0x12e>
	{
		sk9822_data_one_led_at_position(mix_color_hms, hour/12);
 80010e8:	4b6f      	ldr	r3, [pc, #444]	; (80012a8 <led_clock_display+0x2d4>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a6f      	ldr	r2, [pc, #444]	; (80012ac <led_clock_display+0x2d8>)
 80010ee:	fb82 1203 	smull	r1, r2, r2, r3
 80010f2:	1052      	asrs	r2, r2, #1
 80010f4:	17db      	asrs	r3, r3, #31
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fa54 	bl	80005a8 <sk9822_data_one_led_at_position>
 8001100:	e0aa      	b.n	8001258 <led_clock_display+0x284>
	}
	else if(hour/12 == minute/5)
 8001102:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <led_clock_display+0x2d4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a69      	ldr	r2, [pc, #420]	; (80012ac <led_clock_display+0x2d8>)
 8001108:	fb82 1203 	smull	r1, r2, r2, r3
 800110c:	1052      	asrs	r2, r2, #1
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	1ad2      	subs	r2, r2, r3
 8001112:	4b67      	ldr	r3, [pc, #412]	; (80012b0 <led_clock_display+0x2dc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4967      	ldr	r1, [pc, #412]	; (80012b4 <led_clock_display+0x2e0>)
 8001118:	fb81 0103 	smull	r0, r1, r1, r3
 800111c:	1049      	asrs	r1, r1, #1
 800111e:	17db      	asrs	r3, r3, #31
 8001120:	1acb      	subs	r3, r1, r3
 8001122:	429a      	cmp	r2, r3
 8001124:	d119      	bne.n	800115a <led_clock_display+0x186>
	{
		sk9822_data_one_led_at_position(mix_color_hm, hour/12);
 8001126:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <led_clock_display+0x2d4>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a60      	ldr	r2, [pc, #384]	; (80012ac <led_clock_display+0x2d8>)
 800112c:	fb82 1203 	smull	r1, r2, r2, r3
 8001130:	1052      	asrs	r2, r2, #1
 8001132:	17db      	asrs	r3, r3, #31
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	4619      	mov	r1, r3
 8001138:	6938      	ldr	r0, [r7, #16]
 800113a:	f7ff fa35 	bl	80005a8 <sk9822_data_one_led_at_position>
		sk9822_data_one_led_at_position(blue[30], second/5);
 800113e:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <led_clock_display+0x2f0>)
 8001140:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001142:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <led_clock_display+0x2e4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a5b      	ldr	r2, [pc, #364]	; (80012b4 <led_clock_display+0x2e0>)
 8001148:	fb82 1203 	smull	r1, r2, r2, r3
 800114c:	1052      	asrs	r2, r2, #1
 800114e:	17db      	asrs	r3, r3, #31
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fa28 	bl	80005a8 <sk9822_data_one_led_at_position>
 8001158:	e07e      	b.n	8001258 <led_clock_display+0x284>
	}
	else if(hour/12 == second/5)
 800115a:	4b53      	ldr	r3, [pc, #332]	; (80012a8 <led_clock_display+0x2d4>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a53      	ldr	r2, [pc, #332]	; (80012ac <led_clock_display+0x2d8>)
 8001160:	fb82 1203 	smull	r1, r2, r2, r3
 8001164:	1052      	asrs	r2, r2, #1
 8001166:	17db      	asrs	r3, r3, #31
 8001168:	1ad2      	subs	r2, r2, r3
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <led_clock_display+0x2e4>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4951      	ldr	r1, [pc, #324]	; (80012b4 <led_clock_display+0x2e0>)
 8001170:	fb81 0103 	smull	r0, r1, r1, r3
 8001174:	1049      	asrs	r1, r1, #1
 8001176:	17db      	asrs	r3, r3, #31
 8001178:	1acb      	subs	r3, r1, r3
 800117a:	429a      	cmp	r2, r3
 800117c:	d119      	bne.n	80011b2 <led_clock_display+0x1de>
	{
		sk9822_data_one_led_at_position(mix_color_hs, hour/12);
 800117e:	4b4a      	ldr	r3, [pc, #296]	; (80012a8 <led_clock_display+0x2d4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a4a      	ldr	r2, [pc, #296]	; (80012ac <led_clock_display+0x2d8>)
 8001184:	fb82 1203 	smull	r1, r2, r2, r3
 8001188:	1052      	asrs	r2, r2, #1
 800118a:	17db      	asrs	r3, r3, #31
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	4619      	mov	r1, r3
 8001190:	68f8      	ldr	r0, [r7, #12]
 8001192:	f7ff fa09 	bl	80005a8 <sk9822_data_one_led_at_position>
		sk9822_data_one_led_at_position(green[30], minute/5);
 8001196:	4b4c      	ldr	r3, [pc, #304]	; (80012c8 <led_clock_display+0x2f4>)
 8001198:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <led_clock_display+0x2dc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a45      	ldr	r2, [pc, #276]	; (80012b4 <led_clock_display+0x2e0>)
 80011a0:	fb82 1203 	smull	r1, r2, r2, r3
 80011a4:	1052      	asrs	r2, r2, #1
 80011a6:	17db      	asrs	r3, r3, #31
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff f9fc 	bl	80005a8 <sk9822_data_one_led_at_position>
 80011b0:	e052      	b.n	8001258 <led_clock_display+0x284>
	}
	else if(minute/5 == second/5)
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <led_clock_display+0x2dc>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a3f      	ldr	r2, [pc, #252]	; (80012b4 <led_clock_display+0x2e0>)
 80011b8:	fb82 1203 	smull	r1, r2, r2, r3
 80011bc:	1052      	asrs	r2, r2, #1
 80011be:	17db      	asrs	r3, r3, #31
 80011c0:	1ad2      	subs	r2, r2, r3
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <led_clock_display+0x2e4>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	493b      	ldr	r1, [pc, #236]	; (80012b4 <led_clock_display+0x2e0>)
 80011c8:	fb81 0103 	smull	r0, r1, r1, r3
 80011cc:	1049      	asrs	r1, r1, #1
 80011ce:	17db      	asrs	r3, r3, #31
 80011d0:	1acb      	subs	r3, r1, r3
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d119      	bne.n	800120a <led_clock_display+0x236>
	{
		sk9822_data_one_led_at_position(red[30], hour/12);
 80011d6:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <led_clock_display+0x2f8>)
 80011d8:	6f98      	ldr	r0, [r3, #120]	; 0x78
 80011da:	4b33      	ldr	r3, [pc, #204]	; (80012a8 <led_clock_display+0x2d4>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a33      	ldr	r2, [pc, #204]	; (80012ac <led_clock_display+0x2d8>)
 80011e0:	fb82 1203 	smull	r1, r2, r2, r3
 80011e4:	1052      	asrs	r2, r2, #1
 80011e6:	17db      	asrs	r3, r3, #31
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	4619      	mov	r1, r3
 80011ec:	f7ff f9dc 	bl	80005a8 <sk9822_data_one_led_at_position>
		sk9822_data_one_led_at_position(mix_color_ms, minute/5);
 80011f0:	4b2f      	ldr	r3, [pc, #188]	; (80012b0 <led_clock_display+0x2dc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a2f      	ldr	r2, [pc, #188]	; (80012b4 <led_clock_display+0x2e0>)
 80011f6:	fb82 1203 	smull	r1, r2, r2, r3
 80011fa:	1052      	asrs	r2, r2, #1
 80011fc:	17db      	asrs	r3, r3, #31
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	4619      	mov	r1, r3
 8001202:	68b8      	ldr	r0, [r7, #8]
 8001204:	f7ff f9d0 	bl	80005a8 <sk9822_data_one_led_at_position>
 8001208:	e026      	b.n	8001258 <led_clock_display+0x284>
	}
	else
	{
		sk9822_data_one_led_at_position(red[30], hour/12);
 800120a:	4b30      	ldr	r3, [pc, #192]	; (80012cc <led_clock_display+0x2f8>)
 800120c:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <led_clock_display+0x2d4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a26      	ldr	r2, [pc, #152]	; (80012ac <led_clock_display+0x2d8>)
 8001214:	fb82 1203 	smull	r1, r2, r2, r3
 8001218:	1052      	asrs	r2, r2, #1
 800121a:	17db      	asrs	r3, r3, #31
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff f9c2 	bl	80005a8 <sk9822_data_one_led_at_position>
		sk9822_data_one_led_at_position(green[30], minute/5);
 8001224:	4b28      	ldr	r3, [pc, #160]	; (80012c8 <led_clock_display+0x2f4>)
 8001226:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001228:	4b21      	ldr	r3, [pc, #132]	; (80012b0 <led_clock_display+0x2dc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a21      	ldr	r2, [pc, #132]	; (80012b4 <led_clock_display+0x2e0>)
 800122e:	fb82 1203 	smull	r1, r2, r2, r3
 8001232:	1052      	asrs	r2, r2, #1
 8001234:	17db      	asrs	r3, r3, #31
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff f9b5 	bl	80005a8 <sk9822_data_one_led_at_position>
		sk9822_data_one_led_at_position(blue[30], second/5);
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <led_clock_display+0x2f0>)
 8001240:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <led_clock_display+0x2e4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a1b      	ldr	r2, [pc, #108]	; (80012b4 <led_clock_display+0x2e0>)
 8001248:	fb82 1203 	smull	r1, r2, r2, r3
 800124c:	1052      	asrs	r2, r2, #1
 800124e:	17db      	asrs	r3, r3, #31
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	4619      	mov	r1, r3
 8001254:	f7ff f9a8 	bl	80005a8 <sk9822_data_one_led_at_position>
	}
	led_flag[hour/12].flag = 0;
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <led_clock_display+0x2d4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a13      	ldr	r2, [pc, #76]	; (80012ac <led_clock_display+0x2d8>)
 800125e:	fb82 1203 	smull	r1, r2, r2, r3
 8001262:	1052      	asrs	r2, r2, #1
 8001264:	17db      	asrs	r3, r3, #31
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	4a14      	ldr	r2, [pc, #80]	; (80012bc <led_clock_display+0x2e8>)
 800126a:	2100      	movs	r1, #0
 800126c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	led_flag[minute/5].flag = 0;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <led_clock_display+0x2dc>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0f      	ldr	r2, [pc, #60]	; (80012b4 <led_clock_display+0x2e0>)
 8001276:	fb82 1203 	smull	r1, r2, r2, r3
 800127a:	1052      	asrs	r2, r2, #1
 800127c:	17db      	asrs	r3, r3, #31
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	4a0e      	ldr	r2, [pc, #56]	; (80012bc <led_clock_display+0x2e8>)
 8001282:	2100      	movs	r1, #0
 8001284:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	led_flag[second/5].flag = 0;
 8001288:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <led_clock_display+0x2e4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <led_clock_display+0x2e0>)
 800128e:	fb82 1203 	smull	r1, r2, r2, r3
 8001292:	1052      	asrs	r2, r2, #1
 8001294:	17db      	asrs	r3, r3, #31
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	4a08      	ldr	r2, [pc, #32]	; (80012bc <led_clock_display+0x2e8>)
 800129a:	2100      	movs	r1, #0
 800129c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
}
 80012a0:	bf00      	nop
 80012a2:	3720      	adds	r7, #32
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000168c 	.word	0x2000168c
 80012ac:	2aaaaaab 	.word	0x2aaaaaab
 80012b0:	20000008 	.word	0x20000008
 80012b4:	66666667 	.word	0x66666667
 80012b8:	20000004 	.word	0x20000004
 80012bc:	20000030 	.word	0x20000030
 80012c0:	20001090 	.word	0x20001090
 80012c4:	20000890 	.word	0x20000890
 80012c8:	20000490 	.word	0x20000490
 80012cc:	20000090 	.word	0x20000090

080012d0 <clock_led>:

void clock_led()
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	if(timer_flag[2] == 1)
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <clock_led+0x68>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d12a      	bne.n	8001332 <clock_led+0x62>
	{
		if(second >= 60)
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <clock_led+0x6c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b3b      	cmp	r3, #59	; 0x3b
 80012e2:	dd07      	ble.n	80012f4 <clock_led+0x24>
		{
			second = 0;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <clock_led+0x6c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	601a      	str	r2, [r3, #0]
			minute++;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <clock_led+0x70>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a13      	ldr	r2, [pc, #76]	; (8001340 <clock_led+0x70>)
 80012f2:	6013      	str	r3, [r2, #0]
		}
		if(minute >= 60)
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <clock_led+0x70>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2b3b      	cmp	r3, #59	; 0x3b
 80012fa:	dd07      	ble.n	800130c <clock_led+0x3c>
		{
			minute = 0;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <clock_led+0x70>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
			hour++;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <clock_led+0x74>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <clock_led+0x74>)
 800130a:	6013      	str	r3, [r2, #0]
		}
		if(hour >= 24)
 800130c:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <clock_led+0x74>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b17      	cmp	r3, #23
 8001312:	dd02      	ble.n	800131a <clock_led+0x4a>
		{
			hour = 0;
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <clock_led+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
		}
		led_clock_display();
 800131a:	f7ff fe5b 	bl	8000fd4 <led_clock_display>
		second++;
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <clock_led+0x6c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <clock_led+0x6c>)
 8001326:	6013      	str	r3, [r2, #0]
		Set_timer(1000, 2);
 8001328:	2102      	movs	r1, #2
 800132a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800132e:	f7ff fc19 	bl	8000b64 <Set_timer>
	}
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20001640 	.word	0x20001640
 800133c:	20000004 	.word	0x20000004
 8001340:	20000008 	.word	0x20000008
 8001344:	2000168c 	.word	0x2000168c

08001348 <test_RGB>:
		Set_timer(1000, 1);
	}
}

void test_RGB()
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	if(index_0 >= 4)
 800134c:	4b29      	ldr	r3, [pc, #164]	; (80013f4 <test_RGB+0xac>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b03      	cmp	r3, #3
 8001352:	dd02      	ble.n	800135a <test_RGB+0x12>
	{
		index_0 = 1;
 8001354:	4b27      	ldr	r3, [pc, #156]	; (80013f4 <test_RGB+0xac>)
 8001356:	2201      	movs	r2, #1
 8001358:	601a      	str	r2, [r3, #0]
	}
	if(timer_flag[0] == 1)
 800135a:	4b27      	ldr	r3, [pc, #156]	; (80013f8 <test_RGB+0xb0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d145      	bne.n	80013ee <test_RGB+0xa6>
	{
		switch (index_0) {
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <test_RGB+0xac>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2b03      	cmp	r3, #3
 8001368:	d026      	beq.n	80013b8 <test_RGB+0x70>
 800136a:	2b03      	cmp	r3, #3
 800136c:	dc34      	bgt.n	80013d8 <test_RGB+0x90>
 800136e:	2b01      	cmp	r3, #1
 8001370:	d002      	beq.n	8001378 <test_RGB+0x30>
 8001372:	2b02      	cmp	r3, #2
 8001374:	d010      	beq.n	8001398 <test_RGB+0x50>
				HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, 0);
				HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, 0);
				HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, 1);
				break;
			default:
				break;
 8001376:	e02f      	b.n	80013d8 <test_RGB+0x90>
				HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, 1);
 8001378:	2201      	movs	r2, #1
 800137a:	2108      	movs	r1, #8
 800137c:	481f      	ldr	r0, [pc, #124]	; (80013fc <test_RGB+0xb4>)
 800137e:	f000 fb71 	bl	8001a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2110      	movs	r1, #16
 8001386:	481d      	ldr	r0, [pc, #116]	; (80013fc <test_RGB+0xb4>)
 8001388:	f000 fb6c 	bl	8001a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2120      	movs	r1, #32
 8001390:	481a      	ldr	r0, [pc, #104]	; (80013fc <test_RGB+0xb4>)
 8001392:	f000 fb67 	bl	8001a64 <HAL_GPIO_WritePin>
				break;
 8001396:	e020      	b.n	80013da <test_RGB+0x92>
				HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, 0);
 8001398:	2200      	movs	r2, #0
 800139a:	2108      	movs	r1, #8
 800139c:	4817      	ldr	r0, [pc, #92]	; (80013fc <test_RGB+0xb4>)
 800139e:	f000 fb61 	bl	8001a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2110      	movs	r1, #16
 80013a6:	4815      	ldr	r0, [pc, #84]	; (80013fc <test_RGB+0xb4>)
 80013a8:	f000 fb5c 	bl	8001a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2120      	movs	r1, #32
 80013b0:	4812      	ldr	r0, [pc, #72]	; (80013fc <test_RGB+0xb4>)
 80013b2:	f000 fb57 	bl	8001a64 <HAL_GPIO_WritePin>
				break;
 80013b6:	e010      	b.n	80013da <test_RGB+0x92>
				HAL_GPIO_WritePin(led_red_GPIO_Port, led_red_Pin, 0);
 80013b8:	2200      	movs	r2, #0
 80013ba:	2108      	movs	r1, #8
 80013bc:	480f      	ldr	r0, [pc, #60]	; (80013fc <test_RGB+0xb4>)
 80013be:	f000 fb51 	bl	8001a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led_green_GPIO_Port, led_green_Pin, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2110      	movs	r1, #16
 80013c6:	480d      	ldr	r0, [pc, #52]	; (80013fc <test_RGB+0xb4>)
 80013c8:	f000 fb4c 	bl	8001a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(led_blue_GPIO_Port, led_blue_Pin, 1);
 80013cc:	2201      	movs	r2, #1
 80013ce:	2120      	movs	r1, #32
 80013d0:	480a      	ldr	r0, [pc, #40]	; (80013fc <test_RGB+0xb4>)
 80013d2:	f000 fb47 	bl	8001a64 <HAL_GPIO_WritePin>
				break;
 80013d6:	e000      	b.n	80013da <test_RGB+0x92>
				break;
 80013d8:	bf00      	nop
		}
		index_0++;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <test_RGB+0xac>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <test_RGB+0xac>)
 80013e2:	6013      	str	r3, [r2, #0]
		Set_timer(1000, 0);
 80013e4:	2100      	movs	r1, #0
 80013e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013ea:	f7ff fbbb 	bl	8000b64 <Set_timer>
	}
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20001688 	.word	0x20001688
 80013f8:	20001640 	.word	0x20001640
 80013fc:	40020400 	.word	0x40020400

08001400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001400:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001438 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001404:	f7ff fda8 	bl	8000f58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800140a:	490d      	ldr	r1, [pc, #52]	; (8001440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800140c:	4a0d      	ldr	r2, [pc, #52]	; (8001444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800140e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001410:	e002      	b.n	8001418 <LoopCopyDataInit>

08001412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001416:	3304      	adds	r3, #4

08001418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800141a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800141c:	d3f9      	bcc.n	8001412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800141e:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001420:	4c0a      	ldr	r4, [pc, #40]	; (800144c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001424:	e001      	b.n	800142a <LoopFillZerobss>

08001426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001428:	3204      	adds	r2, #4

0800142a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800142a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800142c:	d3fb      	bcc.n	8001426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800142e:	f002 f98b 	bl	8003748 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001432:	f7ff f98f 	bl	8000754 <main>
  bx  lr    
 8001436:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001438:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800143c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001440:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001444:	080037c8 	.word	0x080037c8
  ldr r2, =_sbss
 8001448:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800144c:	20001694 	.word	0x20001694

08001450 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001450:	e7fe      	b.n	8001450 <ADC_IRQHandler>
	...

08001454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_Init+0x40>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <HAL_Init+0x40>)
 800145e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001462:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001464:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_Init+0x40>)
 800146a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800146e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <HAL_Init+0x40>)
 8001476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147c:	2003      	movs	r0, #3
 800147e:	f000 f92b 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001482:	200f      	movs	r0, #15
 8001484:	f000 f808 	bl	8001498 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001488:	f7ff fbc0 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023c00 	.word	0x40023c00

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014a0:	4b12      	ldr	r3, [pc, #72]	; (80014ec <HAL_InitTick+0x54>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b12      	ldr	r3, [pc, #72]	; (80014f0 <HAL_InitTick+0x58>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80014b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f943 	bl	8001742 <HAL_SYSTICK_Config>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e00e      	b.n	80014e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d80a      	bhi.n	80014e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	f04f 30ff 	mov.w	r0, #4294967295
 80014d4:	f000 f90b 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d8:	4a06      	ldr	r2, [pc, #24]	; (80014f4 <HAL_InitTick+0x5c>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	e000      	b.n	80014e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000000 	.word	0x20000000
 80014f0:	20000010 	.word	0x20000010
 80014f4:	2000000c 	.word	0x2000000c

080014f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x20>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	461a      	mov	r2, r3
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_IncTick+0x24>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4413      	add	r3, r2
 8001508:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_IncTick+0x24>)
 800150a:	6013      	str	r3, [r2, #0]
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000010 	.word	0x20000010
 800151c:	20001690 	.word	0x20001690

08001520 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return uwTick;
 8001524:	4b03      	ldr	r3, [pc, #12]	; (8001534 <HAL_GetTick+0x14>)
 8001526:	681b      	ldr	r3, [r3, #0]
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	20001690 	.word	0x20001690

08001538 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b480      	push	{r7}
 800153a:	b085      	sub	sp, #20
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800154e:	68ba      	ldr	r2, [r7, #8]
 8001550:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001554:	4013      	ands	r3, r2
 8001556:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001560:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001564:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001568:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800156a:	4a04      	ldr	r2, [pc, #16]	; (800157c <__NVIC_SetPriorityGrouping+0x44>)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	60d3      	str	r3, [r2, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <__NVIC_GetPriorityGrouping+0x18>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	f003 0307 	and.w	r3, r3, #7
}
 800158e:	4618      	mov	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	4603      	mov	r3, r0
 80015a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	db0b      	blt.n	80015c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	f003 021f 	and.w	r2, r3, #31
 80015b4:	4907      	ldr	r1, [pc, #28]	; (80015d4 <__NVIC_EnableIRQ+0x38>)
 80015b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ba:	095b      	lsrs	r3, r3, #5
 80015bc:	2001      	movs	r0, #1
 80015be:	fa00 f202 	lsl.w	r2, r0, r2
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000e100 	.word	0xe000e100

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff29 	bl	8001538 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff3e 	bl	8001580 <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff31 	bl	800159c <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffa2 	bl	8001694 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
 8001776:	e159      	b.n	8001a2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001778:	2201      	movs	r2, #1
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	697a      	ldr	r2, [r7, #20]
 8001788:	4013      	ands	r3, r2
 800178a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 8148 	bne.w	8001a26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d005      	beq.n	80017ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d130      	bne.n	8001810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	2203      	movs	r2, #3
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4013      	ands	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	68da      	ldr	r2, [r3, #12]
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e4:	2201      	movs	r2, #1
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	4013      	ands	r3, r2
 80017f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	091b      	lsrs	r3, r3, #4
 80017fa:	f003 0201 	and.w	r2, r3, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	4313      	orrs	r3, r2
 8001808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	2b03      	cmp	r3, #3
 800181a:	d017      	beq.n	800184c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	2203      	movs	r2, #3
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	69ba      	ldr	r2, [r7, #24]
 8001830:	4013      	ands	r3, r2
 8001832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4313      	orrs	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d123      	bne.n	80018a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	08da      	lsrs	r2, r3, #3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3208      	adds	r2, #8
 8001860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	220f      	movs	r2, #15
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	f003 0307 	and.w	r3, r3, #7
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	08da      	lsrs	r2, r3, #3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3208      	adds	r2, #8
 800189a:	69b9      	ldr	r1, [r7, #24]
 800189c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0203 	and.w	r2, r3, #3
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f000 80a2 	beq.w	8001a26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_GPIO_Init+0x2e8>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <HAL_GPIO_Init+0x2e8>)
 80018ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f0:	6453      	str	r3, [r2, #68]	; 0x44
 80018f2:	4b54      	ldr	r3, [pc, #336]	; (8001a44 <HAL_GPIO_Init+0x2e8>)
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018fe:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	3302      	adds	r3, #2
 8001906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f003 0303 	and.w	r3, r3, #3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	220f      	movs	r2, #15
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4013      	ands	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_GPIO_Init+0x2f0>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d019      	beq.n	800195e <HAL_GPIO_Init+0x202>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a48      	ldr	r2, [pc, #288]	; (8001a50 <HAL_GPIO_Init+0x2f4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d013      	beq.n	800195a <HAL_GPIO_Init+0x1fe>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a47      	ldr	r2, [pc, #284]	; (8001a54 <HAL_GPIO_Init+0x2f8>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d00d      	beq.n	8001956 <HAL_GPIO_Init+0x1fa>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a46      	ldr	r2, [pc, #280]	; (8001a58 <HAL_GPIO_Init+0x2fc>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d007      	beq.n	8001952 <HAL_GPIO_Init+0x1f6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a45      	ldr	r2, [pc, #276]	; (8001a5c <HAL_GPIO_Init+0x300>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d101      	bne.n	800194e <HAL_GPIO_Init+0x1f2>
 800194a:	2304      	movs	r3, #4
 800194c:	e008      	b.n	8001960 <HAL_GPIO_Init+0x204>
 800194e:	2307      	movs	r3, #7
 8001950:	e006      	b.n	8001960 <HAL_GPIO_Init+0x204>
 8001952:	2303      	movs	r3, #3
 8001954:	e004      	b.n	8001960 <HAL_GPIO_Init+0x204>
 8001956:	2302      	movs	r3, #2
 8001958:	e002      	b.n	8001960 <HAL_GPIO_Init+0x204>
 800195a:	2301      	movs	r3, #1
 800195c:	e000      	b.n	8001960 <HAL_GPIO_Init+0x204>
 800195e:	2300      	movs	r3, #0
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	f002 0203 	and.w	r2, r2, #3
 8001966:	0092      	lsls	r2, r2, #2
 8001968:	4093      	lsls	r3, r2
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001970:	4935      	ldr	r1, [pc, #212]	; (8001a48 <HAL_GPIO_Init+0x2ec>)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	089b      	lsrs	r3, r3, #2
 8001976:	3302      	adds	r3, #2
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197e:	4b38      	ldr	r3, [pc, #224]	; (8001a60 <HAL_GPIO_Init+0x304>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019a2:	4a2f      	ldr	r2, [pc, #188]	; (8001a60 <HAL_GPIO_Init+0x304>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_GPIO_Init+0x304>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019cc:	4a24      	ldr	r2, [pc, #144]	; (8001a60 <HAL_GPIO_Init+0x304>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_GPIO_Init+0x304>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019f6:	4a1a      	ldr	r2, [pc, #104]	; (8001a60 <HAL_GPIO_Init+0x304>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_GPIO_Init+0x304>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a20:	4a0f      	ldr	r2, [pc, #60]	; (8001a60 <HAL_GPIO_Init+0x304>)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	2b0f      	cmp	r3, #15
 8001a30:	f67f aea2 	bls.w	8001778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a34:	bf00      	nop
 8001a36:	bf00      	nop
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40013800 	.word	0x40013800
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	40020800 	.word	0x40020800
 8001a58:	40020c00 	.word	0x40020c00
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	40013c00 	.word	0x40013c00

08001a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
 8001a70:	4613      	mov	r3, r2
 8001a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a74:	787b      	ldrb	r3, [r7, #1]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7a:	887a      	ldrh	r2, [r7, #2]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a80:	e003      	b.n	8001a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	041a      	lsls	r2, r3, #16
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	619a      	str	r2, [r3, #24]
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e128      	b.n	8001cfc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d109      	bne.n	8001aca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a90      	ldr	r2, [pc, #576]	; (8001d04 <HAL_I2S_Init+0x26c>)
 8001ac2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f7ff f8c9 	bl	8000c5c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2202      	movs	r2, #2
 8001ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ae0:	f023 030f 	bic.w	r3, r3, #15
 8001ae4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2202      	movs	r2, #2
 8001aec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d060      	beq.n	8001bb8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d102      	bne.n	8001b04 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001afe:	2310      	movs	r3, #16
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e001      	b.n	8001b08 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001b04:	2320      	movs	r3, #32
 8001b06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b20      	cmp	r3, #32
 8001b0e:	d802      	bhi.n	8001b16 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001b16:	2001      	movs	r0, #1
 8001b18:	f001 f972 	bl	8002e00 <HAL_RCCEx_GetPeriphCLKFreq>
 8001b1c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b26:	d125      	bne.n	8001b74 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d010      	beq.n	8001b52 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	461a      	mov	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4c:	3305      	adds	r3, #5
 8001b4e:	613b      	str	r3, [r7, #16]
 8001b50:	e01f      	b.n	8001b92 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b6e:	3305      	adds	r3, #5
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	e00e      	b.n	8001b92 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4413      	add	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	461a      	mov	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8e:	3305      	adds	r3, #5
 8001b90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	4a5c      	ldr	r2, [pc, #368]	; (8001d08 <HAL_I2S_Init+0x270>)
 8001b96:	fba2 2303 	umull	r2, r3, r2, r3
 8001b9a:	08db      	lsrs	r3, r3, #3
 8001b9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	e003      	b.n	8001bc0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d902      	bls.n	8001bcc <HAL_I2S_Init+0x134>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	2bff      	cmp	r3, #255	; 0xff
 8001bca:	d907      	bls.n	8001bdc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd0:	f043 0210 	orr.w	r2, r3, #16
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e08f      	b.n	8001cfc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	ea42 0103 	orr.w	r1, r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	69fa      	ldr	r2, [r7, #28]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001bfa:	f023 030f 	bic.w	r3, r3, #15
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6851      	ldr	r1, [r2, #4]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6892      	ldr	r2, [r2, #8]
 8001c06:	4311      	orrs	r1, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	68d2      	ldr	r2, [r2, #12]
 8001c0c:	4311      	orrs	r1, r2
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6992      	ldr	r2, [r2, #24]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d161      	bne.n	8001cec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a38      	ldr	r2, [pc, #224]	; (8001d0c <HAL_I2S_Init+0x274>)
 8001c2c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a37      	ldr	r2, [pc, #220]	; (8001d10 <HAL_I2S_Init+0x278>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d101      	bne.n	8001c3c <HAL_I2S_Init+0x1a4>
 8001c38:	4b36      	ldr	r3, [pc, #216]	; (8001d14 <HAL_I2S_Init+0x27c>)
 8001c3a:	e001      	b.n	8001c40 <HAL_I2S_Init+0x1a8>
 8001c3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6812      	ldr	r2, [r2, #0]
 8001c46:	4932      	ldr	r1, [pc, #200]	; (8001d10 <HAL_I2S_Init+0x278>)
 8001c48:	428a      	cmp	r2, r1
 8001c4a:	d101      	bne.n	8001c50 <HAL_I2S_Init+0x1b8>
 8001c4c:	4a31      	ldr	r2, [pc, #196]	; (8001d14 <HAL_I2S_Init+0x27c>)
 8001c4e:	e001      	b.n	8001c54 <HAL_I2S_Init+0x1bc>
 8001c50:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c54:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001c58:	f023 030f 	bic.w	r3, r3, #15
 8001c5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a2b      	ldr	r2, [pc, #172]	; (8001d10 <HAL_I2S_Init+0x278>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d101      	bne.n	8001c6c <HAL_I2S_Init+0x1d4>
 8001c68:	4b2a      	ldr	r3, [pc, #168]	; (8001d14 <HAL_I2S_Init+0x27c>)
 8001c6a:	e001      	b.n	8001c70 <HAL_I2S_Init+0x1d8>
 8001c6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c70:	2202      	movs	r2, #2
 8001c72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a25      	ldr	r2, [pc, #148]	; (8001d10 <HAL_I2S_Init+0x278>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2S_Init+0x1ea>
 8001c7e:	4b25      	ldr	r3, [pc, #148]	; (8001d14 <HAL_I2S_Init+0x27c>)
 8001c80:	e001      	b.n	8001c86 <HAL_I2S_Init+0x1ee>
 8001c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c92:	d003      	beq.n	8001c9c <HAL_I2S_Init+0x204>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	e001      	b.n	8001ca8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	897b      	ldrh	r3, [r7, #10]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cd4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a0d      	ldr	r2, [pc, #52]	; (8001d10 <HAL_I2S_Init+0x278>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d101      	bne.n	8001ce4 <HAL_I2S_Init+0x24c>
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <HAL_I2S_Init+0x27c>)
 8001ce2:	e001      	b.n	8001ce8 <HAL_I2S_Init+0x250>
 8001ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ce8:	897a      	ldrh	r2, [r7, #10]
 8001cea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	08001e0f 	.word	0x08001e0f
 8001d08:	cccccccd 	.word	0xcccccccd
 8001d0c:	08001f25 	.word	0x08001f25
 8001d10:	40003800 	.word	0x40003800
 8001d14:	40003400 	.word	0x40003400

08001d18 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr

08001d40 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001d48:	bf00      	nop
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	881a      	ldrh	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6c:	1c9a      	adds	r2, r3, #2
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10e      	bne.n	8001da8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d98:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ffb8 	bl	8001d18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001da8:	bf00      	nop
 8001daa:	3708      	adds	r7, #8
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	b292      	uxth	r2, r2
 8001dc4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dca:	1c9a      	adds	r2, r3, #2
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10e      	bne.n	8001e06 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001df6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f7ff ff93 	bl	8001d2c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b086      	sub	sp, #24
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d13a      	bne.n	8001ea0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d109      	bne.n	8001e48 <I2S_IRQHandler+0x3a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	d102      	bne.n	8001e48 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff ffb4 	bl	8001db0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4e:	2b40      	cmp	r3, #64	; 0x40
 8001e50:	d126      	bne.n	8001ea0 <I2S_IRQHandler+0x92>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	2b20      	cmp	r3, #32
 8001e5e:	d11f      	bne.n	8001ea0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685a      	ldr	r2, [r3, #4]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	613b      	str	r3, [r7, #16]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	613b      	str	r3, [r7, #16]
 8001e84:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ff50 	bl	8001d40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b03      	cmp	r3, #3
 8001eaa:	d136      	bne.n	8001f1a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d109      	bne.n	8001eca <I2S_IRQHandler+0xbc>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec0:	2b80      	cmp	r3, #128	; 0x80
 8001ec2:	d102      	bne.n	8001eca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff45 	bl	8001d54 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d122      	bne.n	8001f1a <I2S_IRQHandler+0x10c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b20      	cmp	r3, #32
 8001ee0:	d11b      	bne.n	8001f1a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ef0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	f043 0204 	orr.w	r2, r3, #4
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff13 	bl	8001d40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001f1a:	bf00      	nop
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a92      	ldr	r2, [pc, #584]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001f3e:	4b92      	ldr	r3, [pc, #584]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f40:	e001      	b.n	8001f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001f42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a8b      	ldr	r2, [pc, #556]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001f5c:	4b8a      	ldr	r3, [pc, #552]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f5e:	e001      	b.n	8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f70:	d004      	beq.n	8001f7c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f040 8099 	bne.w	80020ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f925 	bl	80021e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d107      	bne.n	8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d002      	beq.n	8001fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f9c8 	bl	8002340 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb6:	2b40      	cmp	r3, #64	; 0x40
 8001fb8:	d13a      	bne.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d035      	beq.n	8002030 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a6e      	ldr	r2, [pc, #440]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d101      	bne.n	8001fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001fce:	4b6e      	ldr	r3, [pc, #440]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fd0:	e001      	b.n	8001fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001fd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4969      	ldr	r1, [pc, #420]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fde:	428b      	cmp	r3, r1
 8001fe0:	d101      	bne.n	8001fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001fe2:	4b69      	ldr	r3, [pc, #420]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fe4:	e001      	b.n	8001fea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001fe6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001fee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685a      	ldr	r2, [r3, #4]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ffe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002000:	2300      	movs	r3, #0
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002022:	f043 0202 	orr.w	r2, r3, #2
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fe88 	bl	8001d40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0308 	and.w	r3, r3, #8
 8002036:	2b08      	cmp	r3, #8
 8002038:	f040 80c3 	bne.w	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0320 	and.w	r3, r3, #32
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80bd 	beq.w	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002056:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a49      	ldr	r2, [pc, #292]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002062:	4b49      	ldr	r3, [pc, #292]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002064:	e001      	b.n	800206a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002066:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4944      	ldr	r1, [pc, #272]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002072:	428b      	cmp	r3, r1
 8002074:	d101      	bne.n	800207a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002076:	4b44      	ldr	r3, [pc, #272]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002078:	e001      	b.n	800207e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800207a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800207e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002082:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	60bb      	str	r3, [r7, #8]
 8002090:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2201      	movs	r2, #1
 8002096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	f043 0204 	orr.w	r2, r3, #4
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fe4a 	bl	8001d40 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020ac:	e089      	b.n	80021c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d107      	bne.n	80020c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8be 	bl	8002244 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d107      	bne.n	80020e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f8fd 	bl	80022dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d12f      	bne.n	800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d02a      	beq.n	800214c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002104:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002110:	4b1d      	ldr	r3, [pc, #116]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002112:	e001      	b.n	8002118 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002114:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4919      	ldr	r1, [pc, #100]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002120:	428b      	cmp	r3, r1
 8002122:	d101      	bne.n	8002128 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002126:	e001      	b.n	800212c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002128:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800212c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002130:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f043 0202 	orr.w	r2, r3, #2
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f7ff fdfa 	bl	8001d40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b08      	cmp	r3, #8
 8002154:	d136      	bne.n	80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	2b00      	cmp	r3, #0
 800215e:	d031      	beq.n	80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a07      	ldr	r2, [pc, #28]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d101      	bne.n	800216e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800216c:	e001      	b.n	8002172 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800216e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4902      	ldr	r1, [pc, #8]	; (8002184 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800217a:	428b      	cmp	r3, r1
 800217c:	d106      	bne.n	800218c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800217e:	4b02      	ldr	r3, [pc, #8]	; (8002188 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002180:	e006      	b.n	8002190 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002182:	bf00      	nop
 8002184:	40003800 	.word	0x40003800
 8002188:	40003400 	.word	0x40003400
 800218c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002190:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002194:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	f043 0204 	orr.w	r2, r3, #4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff fdc0 	bl	8001d40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021c0:	e000      	b.n	80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80021c2:	bf00      	nop
}
 80021c4:	bf00      	nop
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c99      	adds	r1, r3, #2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6251      	str	r1, [r2, #36]	; 0x24
 80021f2:	881a      	ldrh	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d113      	bne.n	800223a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002220:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002226:	b29b      	uxth	r3, r3
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f7ff ffc9 	bl	80021cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800223a:	bf00      	nop
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	1c99      	adds	r1, r3, #2
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6251      	str	r1, [r2, #36]	; 0x24
 8002256:	8819      	ldrh	r1, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a1d      	ldr	r2, [pc, #116]	; (80022d4 <I2SEx_TxISR_I2SExt+0x90>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d101      	bne.n	8002266 <I2SEx_TxISR_I2SExt+0x22>
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002264:	e001      	b.n	800226a <I2SEx_TxISR_I2SExt+0x26>
 8002266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800226a:	460a      	mov	r2, r1
 800226c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002272:	b29b      	uxth	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	b29a      	uxth	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d121      	bne.n	80022ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a12      	ldr	r2, [pc, #72]	; (80022d4 <I2SEx_TxISR_I2SExt+0x90>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d101      	bne.n	8002294 <I2SEx_TxISR_I2SExt+0x50>
 8002290:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002292:	e001      	b.n	8002298 <I2SEx_TxISR_I2SExt+0x54>
 8002294:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	490d      	ldr	r1, [pc, #52]	; (80022d4 <I2SEx_TxISR_I2SExt+0x90>)
 80022a0:	428b      	cmp	r3, r1
 80022a2:	d101      	bne.n	80022a8 <I2SEx_TxISR_I2SExt+0x64>
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <I2SEx_TxISR_I2SExt+0x94>)
 80022a6:	e001      	b.n	80022ac <I2SEx_TxISR_I2SExt+0x68>
 80022a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d106      	bne.n	80022ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff81 	bl	80021cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40003800 	.word	0x40003800
 80022d8:	40003400 	.word	0x40003400

080022dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68d8      	ldr	r0, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	1c99      	adds	r1, r3, #2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80022f4:	b282      	uxth	r2, r0
 80022f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d113      	bne.n	8002338 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800231e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002324:	b29b      	uxth	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d106      	bne.n	8002338 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff ff4a 	bl	80021cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a20      	ldr	r2, [pc, #128]	; (80023d0 <I2SEx_RxISR_I2SExt+0x90>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d101      	bne.n	8002356 <I2SEx_RxISR_I2SExt+0x16>
 8002352:	4b20      	ldr	r3, [pc, #128]	; (80023d4 <I2SEx_RxISR_I2SExt+0x94>)
 8002354:	e001      	b.n	800235a <I2SEx_RxISR_I2SExt+0x1a>
 8002356:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800235a:	68d8      	ldr	r0, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002360:	1c99      	adds	r1, r3, #2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002366:	b282      	uxth	r2, r0
 8002368:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800237c:	b29b      	uxth	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d121      	bne.n	80023c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <I2SEx_RxISR_I2SExt+0x90>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d101      	bne.n	8002390 <I2SEx_RxISR_I2SExt+0x50>
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <I2SEx_RxISR_I2SExt+0x94>)
 800238e:	e001      	b.n	8002394 <I2SEx_RxISR_I2SExt+0x54>
 8002390:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002394:	685a      	ldr	r2, [r3, #4]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	490d      	ldr	r1, [pc, #52]	; (80023d0 <I2SEx_RxISR_I2SExt+0x90>)
 800239c:	428b      	cmp	r3, r1
 800239e:	d101      	bne.n	80023a4 <I2SEx_RxISR_I2SExt+0x64>
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <I2SEx_RxISR_I2SExt+0x94>)
 80023a2:	e001      	b.n	80023a8 <I2SEx_RxISR_I2SExt+0x68>
 80023a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d106      	bne.n	80023c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ff03 	bl	80021cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40003800 	.word	0x40003800
 80023d4:	40003400 	.word	0x40003400

080023d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e267      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d075      	beq.n	80024e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d00c      	beq.n	800241c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002402:	4b85      	ldr	r3, [pc, #532]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800240a:	2b08      	cmp	r3, #8
 800240c:	d112      	bne.n	8002434 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240e:	4b82      	ldr	r3, [pc, #520]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002416:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800241a:	d10b      	bne.n	8002434 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d05b      	beq.n	80024e0 <HAL_RCC_OscConfig+0x108>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d157      	bne.n	80024e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e242      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800243c:	d106      	bne.n	800244c <HAL_RCC_OscConfig+0x74>
 800243e:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a75      	ldr	r2, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	e01d      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002454:	d10c      	bne.n	8002470 <HAL_RCC_OscConfig+0x98>
 8002456:	4b70      	ldr	r3, [pc, #448]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a6f      	ldr	r2, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800245c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002460:	6013      	str	r3, [r2, #0]
 8002462:	4b6d      	ldr	r3, [pc, #436]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a6c      	ldr	r2, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e00b      	b.n	8002488 <HAL_RCC_OscConfig+0xb0>
 8002470:	4b69      	ldr	r3, [pc, #420]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a68      	ldr	r2, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247a:	6013      	str	r3, [r2, #0]
 800247c:	4b66      	ldr	r3, [pc, #408]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a65      	ldr	r2, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002486:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d013      	beq.n	80024b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff f846 	bl	8001520 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff f842 	bl	8001520 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e207      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024aa:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0xc0>
 80024b6:	e014      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7ff f832 	bl	8001520 <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c0:	f7ff f82e 	bl	8001520 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b64      	cmp	r3, #100	; 0x64
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e1f3      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d2:	4b51      	ldr	r3, [pc, #324]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0xe8>
 80024de:	e000      	b.n	80024e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d063      	beq.n	80025b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ee:	4b4a      	ldr	r3, [pc, #296]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00b      	beq.n	8002512 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fa:	4b47      	ldr	r3, [pc, #284]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002502:	2b08      	cmp	r3, #8
 8002504:	d11c      	bne.n	8002540 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002506:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d116      	bne.n	8002540 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d005      	beq.n	800252a <HAL_RCC_OscConfig+0x152>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d001      	beq.n	800252a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e1c7      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4937      	ldr	r1, [pc, #220]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253e:	e03a      	b.n	80025b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d020      	beq.n	800258a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002548:	4b34      	ldr	r3, [pc, #208]	; (800261c <HAL_RCC_OscConfig+0x244>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254e:	f7fe ffe7 	bl	8001520 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002556:	f7fe ffe3 	bl	8001520 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e1a8      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002568:	4b2b      	ldr	r3, [pc, #172]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	00db      	lsls	r3, r3, #3
 8002582:	4925      	ldr	r1, [pc, #148]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 8002584:	4313      	orrs	r3, r2
 8002586:	600b      	str	r3, [r1, #0]
 8002588:	e015      	b.n	80025b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258a:	4b24      	ldr	r3, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x244>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe ffc6 	bl	8001520 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe ffc2 	bl	8001520 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e187      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025aa:	4b1b      	ldr	r3, [pc, #108]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f0      	bne.n	8002598 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d036      	beq.n	8002630 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HAL_RCC_OscConfig+0x248>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe ffa6 	bl	8001520 <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d8:	f7fe ffa2 	bl	8001520 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e167      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ea:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCC_OscConfig+0x240>)
 80025ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0f0      	beq.n	80025d8 <HAL_RCC_OscConfig+0x200>
 80025f6:	e01b      	b.n	8002630 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_OscConfig+0x248>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fe:	f7fe ff8f 	bl	8001520 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002604:	e00e      	b.n	8002624 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002606:	f7fe ff8b 	bl	8001520 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d907      	bls.n	8002624 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e150      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
 8002618:	40023800 	.word	0x40023800
 800261c:	42470000 	.word	0x42470000
 8002620:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	4b88      	ldr	r3, [pc, #544]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002626:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1ea      	bne.n	8002606 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	f000 8097 	beq.w	800276c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002642:	4b81      	ldr	r3, [pc, #516]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10f      	bne.n	800266e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002656:	4a7c      	ldr	r2, [pc, #496]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800265c:	6413      	str	r3, [r2, #64]	; 0x40
 800265e:	4b7a      	ldr	r3, [pc, #488]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800266a:	2301      	movs	r3, #1
 800266c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b77      	ldr	r3, [pc, #476]	; (800284c <HAL_RCC_OscConfig+0x474>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d118      	bne.n	80026ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800267a:	4b74      	ldr	r3, [pc, #464]	; (800284c <HAL_RCC_OscConfig+0x474>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a73      	ldr	r2, [pc, #460]	; (800284c <HAL_RCC_OscConfig+0x474>)
 8002680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002684:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002686:	f7fe ff4b 	bl	8001520 <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800268e:	f7fe ff47 	bl	8001520 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e10c      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a0:	4b6a      	ldr	r3, [pc, #424]	; (800284c <HAL_RCC_OscConfig+0x474>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0f0      	beq.n	800268e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d106      	bne.n	80026c2 <HAL_RCC_OscConfig+0x2ea>
 80026b4:	4b64      	ldr	r3, [pc, #400]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b8:	4a63      	ldr	r2, [pc, #396]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026ba:	f043 0301 	orr.w	r3, r3, #1
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0x324>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x30c>
 80026ca:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	4a5e      	ldr	r2, [pc, #376]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6713      	str	r3, [r2, #112]	; 0x70
 80026d6:	4b5c      	ldr	r3, [pc, #368]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026da:	4a5b      	ldr	r2, [pc, #364]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	; 0x70
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0x324>
 80026e4:	4b58      	ldr	r3, [pc, #352]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e8:	4a57      	ldr	r2, [pc, #348]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	; 0x70
 80026f0:	4b55      	ldr	r3, [pc, #340]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe ff0c 	bl	8001520 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe ff08 	bl	8001520 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	; 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e0cb      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002722:	4b49      	ldr	r3, [pc, #292]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ee      	beq.n	800270c <HAL_RCC_OscConfig+0x334>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe fef6 	bl	8001520 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fef2 	bl	8001520 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	; 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e0b5      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ee      	bne.n	8002738 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275a:	7dfb      	ldrb	r3, [r7, #23]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a1 	beq.w	80028b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002776:	4b34      	ldr	r3, [pc, #208]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 030c 	and.w	r3, r3, #12
 800277e:	2b08      	cmp	r3, #8
 8002780:	d05c      	beq.n	800283c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b02      	cmp	r3, #2
 8002788:	d141      	bne.n	800280e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b31      	ldr	r3, [pc, #196]	; (8002850 <HAL_RCC_OscConfig+0x478>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe fec6 	bl	8001520 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe fec2 	bl	8001520 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e087      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69da      	ldr	r2, [r3, #28]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	3b01      	subs	r3, #1
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	061b      	lsls	r3, r3, #24
 80027da:	491b      	ldr	r1, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <HAL_RCC_OscConfig+0x478>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fe9b 	bl	8001520 <HAL_GetTick>
 80027ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ee:	f7fe fe97 	bl	8001520 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e05c      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002800:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0f0      	beq.n	80027ee <HAL_RCC_OscConfig+0x416>
 800280c:	e054      	b.n	80028b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <HAL_RCC_OscConfig+0x478>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002814:	f7fe fe84 	bl	8001520 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe fe80 	bl	8001520 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e045      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_RCC_OscConfig+0x470>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x444>
 800283a:	e03d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d107      	bne.n	8002854 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e038      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
 8002848:	40023800 	.word	0x40023800
 800284c:	40007000 	.word	0x40007000
 8002850:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCC_OscConfig+0x4ec>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d028      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d121      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287a:	429a      	cmp	r2, r3
 800287c:	d11a      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800288a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	4293      	cmp	r3, r2
 800288e:	d111      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d107      	bne.n	80028b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e000      	b.n	80028ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800

080028c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0cc      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b68      	ldr	r3, [pc, #416]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d90c      	bls.n	8002904 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	b2d2      	uxtb	r2, r2
 80028f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b63      	ldr	r3, [pc, #396]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0b8      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002926:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002934:	4b53      	ldr	r3, [pc, #332]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	494d      	ldr	r1, [pc, #308]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	4313      	orrs	r3, r2
 8002950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d044      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d107      	bne.n	8002976 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002966:	4b47      	ldr	r3, [pc, #284]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d119      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e07f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002982:	2b03      	cmp	r3, #3
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002986:	4b3f      	ldr	r3, [pc, #252]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e06f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002996:	4b3b      	ldr	r3, [pc, #236]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e067      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a6:	4b37      	ldr	r3, [pc, #220]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 0203 	bic.w	r2, r3, #3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	4934      	ldr	r1, [pc, #208]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b8:	f7fe fdb2 	bl	8001520 <HAL_GetTick>
 80029bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c0:	f7fe fdae 	bl	8001520 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e04f      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d6:	4b2b      	ldr	r3, [pc, #172]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	f003 020c 	and.w	r2, r3, #12
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d1eb      	bne.n	80029c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0307 	and.w	r3, r3, #7
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d20c      	bcs.n	8002a10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCC_ClockConfig+0x1b8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e032      	b.n	8002a76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a1c:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	4916      	ldr	r1, [pc, #88]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	490e      	ldr	r1, [pc, #56]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4e:	f000 f821 	bl	8002a94 <HAL_RCC_GetSysClockFreq>
 8002a52:	4602      	mov	r2, r0
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_RCC_ClockConfig+0x1bc>)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	091b      	lsrs	r3, r3, #4
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	490a      	ldr	r1, [pc, #40]	; (8002a88 <HAL_RCC_ClockConfig+0x1c0>)
 8002a60:	5ccb      	ldrb	r3, [r1, r3]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	4a09      	ldr	r2, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fd12 	bl	8001498 <HAL_InitTick>

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023c00 	.word	0x40023c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	080037a8 	.word	0x080037a8
 8002a8c:	20000000 	.word	0x20000000
 8002a90:	2000000c 	.word	0x2000000c

08002a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a98:	b090      	sub	sp, #64	; 0x40
 8002a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 030c 	and.w	r3, r3, #12
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	d00d      	beq.n	8002ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	f200 80a1 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d003      	beq.n	8002ace <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac6:	e09b      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002aca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002acc:	e09b      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ace:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002ad0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002ad2:	e098      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002adc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ade:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d028      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	2200      	movs	r2, #0
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	627a      	str	r2, [r7, #36]	; 0x24
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002afc:	2100      	movs	r1, #0
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b00:	fb03 f201 	mul.w	r2, r3, r1
 8002b04:	2300      	movs	r3, #0
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	4a43      	ldr	r2, [pc, #268]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8002b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8002b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b14:	460a      	mov	r2, r1
 8002b16:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b1a:	4413      	add	r3, r2
 8002b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b20:	2200      	movs	r2, #0
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	61fa      	str	r2, [r7, #28]
 8002b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b2e:	f7fd fb53 	bl	80001d8 <__aeabi_uldivmod>
 8002b32:	4602      	mov	r2, r0
 8002b34:	460b      	mov	r3, r1
 8002b36:	4613      	mov	r3, r2
 8002b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3a:	e053      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3c:	4b35      	ldr	r3, [pc, #212]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	2200      	movs	r2, #0
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	617a      	str	r2, [r7, #20]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b4e:	f04f 0b00 	mov.w	fp, #0
 8002b52:	4652      	mov	r2, sl
 8002b54:	465b      	mov	r3, fp
 8002b56:	f04f 0000 	mov.w	r0, #0
 8002b5a:	f04f 0100 	mov.w	r1, #0
 8002b5e:	0159      	lsls	r1, r3, #5
 8002b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b64:	0150      	lsls	r0, r2, #5
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8002b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b86:	ebb2 0408 	subs.w	r4, r2, r8
 8002b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	00eb      	lsls	r3, r5, #3
 8002b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b9c:	00e2      	lsls	r2, r4, #3
 8002b9e:	4614      	mov	r4, r2
 8002ba0:	461d      	mov	r5, r3
 8002ba2:	eb14 030a 	adds.w	r3, r4, sl
 8002ba6:	603b      	str	r3, [r7, #0]
 8002ba8:	eb45 030b 	adc.w	r3, r5, fp
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	028b      	lsls	r3, r1, #10
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	028a      	lsls	r2, r1, #10
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	2200      	movs	r2, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	60fa      	str	r2, [r7, #12]
 8002bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd8:	f7fd fafe 	bl	80001d8 <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3740      	adds	r7, #64	; 0x40
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	017d7840 	.word	0x017d7840

08002c20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d105      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d038      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c4e:	f7fe fc67 	bl	8001520 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c54:	e008      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c56:	f7fe fc63 	bl	8001520 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d901      	bls.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e0bd      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c68:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d1f0      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	071b      	lsls	r3, r3, #28
 8002c86:	495a      	ldr	r1, [pc, #360]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002c8e:	4b57      	ldr	r3, [pc, #348]	; (8002dec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002c90:	2201      	movs	r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c94:	f7fe fc44 	bl	8001520 <HAL_GetTick>
 8002c98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002c9a:	e008      	b.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c9c:	f7fe fc40 	bl	8001520 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e09a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cae:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d0f0      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8083 	beq.w	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	4b48      	ldr	r3, [pc, #288]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a47      	ldr	r2, [pc, #284]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd8:	4b45      	ldr	r3, [pc, #276]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60fb      	str	r3, [r7, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002ce4:	4b43      	ldr	r3, [pc, #268]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf0:	f7fe fc16 	bl	8001520 <HAL_GetTick>
 8002cf4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002cf8:	f7fe fc12 	bl	8001520 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e06c      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d0a:	4b3a      	ldr	r3, [pc, #232]	; (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d16:	4b36      	ldr	r3, [pc, #216]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d02f      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d028      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d34:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d3c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d44:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d4a:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d50:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d114      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fbe0 	bl	8001520 <HAL_GetTick>
 8002d60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d64:	f7fe fbdc 	bl	8001520 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e034      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0ee      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d92:	d10d      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	4911      	ldr	r1, [pc, #68]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	608b      	str	r3, [r1, #8]
 8002dae:	e005      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a0e      	ldr	r2, [pc, #56]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dba:	6093      	str	r3, [r2, #8]
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	4909      	ldr	r1, [pc, #36]	; (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	7d1a      	ldrb	r2, [r3, #20]
 8002dde:	4b07      	ldr	r3, [pc, #28]	; (8002dfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002de0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	42470068 	.word	0x42470068
 8002df0:	40023800 	.word	0x40023800
 8002df4:	40007000 	.word	0x40007000
 8002df8:	42470e40 	.word	0x42470e40
 8002dfc:	424711e0 	.word	0x424711e0

08002e00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d141      	bne.n	8002ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002e1e:	4b25      	ldr	r3, [pc, #148]	; (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d006      	beq.n	8002e3c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e34:	d131      	bne.n	8002e9a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8002e38:	617b      	str	r3, [r7, #20]
          break;
 8002e3a:	e031      	b.n	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e48:	d109      	bne.n	8002e5e <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e4a:	4b1a      	ldr	r3, [pc, #104]	; (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e54:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	e008      	b.n	8002e70 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>)
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002e70:	4b10      	ldr	r3, [pc, #64]	; (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e76:	099b      	lsrs	r3, r3, #6
 8002e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8002e86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e8a:	0f1b      	lsrs	r3, r3, #28
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	68ba      	ldr	r2, [r7, #8]
 8002e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e96:	617b      	str	r3, [r7, #20]
          break;
 8002e98:	e002      	b.n	8002ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
          break;
 8002e9e:	bf00      	nop
        }
      }
      break;
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
    }
  default:
    {
       break;
 8002ea2:	bf00      	nop
    }
  }
  return frequency;
 8002ea4:	697b      	ldr	r3, [r7, #20]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	371c      	adds	r7, #28
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40023800 	.word	0x40023800
 8002eb8:	00bb8000 	.word	0x00bb8000
 8002ebc:	017d7840 	.word	0x017d7840
 8002ec0:	00f42400 	.word	0x00f42400

08002ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e041      	b.n	8002f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d106      	bne.n	8002ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7fd ffda 	bl	8000ea4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3304      	adds	r3, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4610      	mov	r0, r2
 8002f04:	f000 fa70 	bl	80033e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
	...

08002f64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d001      	beq.n	8002f7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e044      	b.n	8003006 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1e      	ldr	r2, [pc, #120]	; (8003014 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d018      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa6:	d013      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <HAL_TIM_Base_Start_IT+0xb4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d00e      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_TIM_Base_Start_IT+0xb8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d009      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a17      	ldr	r2, [pc, #92]	; (8003020 <HAL_TIM_Base_Start_IT+0xbc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_Base_Start_IT+0x6c>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a16      	ldr	r2, [pc, #88]	; (8003024 <HAL_TIM_Base_Start_IT+0xc0>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d111      	bne.n	8002ff4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d010      	beq.n	8003004 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f042 0201 	orr.w	r2, r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff2:	e007      	b.n	8003004 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f042 0201 	orr.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40014000 	.word	0x40014000

08003028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d020      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d01b      	beq.n	800308c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0202 	mvn.w	r2, #2
 800305c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699b      	ldr	r3, [r3, #24]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d003      	beq.n	800307a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f999 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 8003078:	e005      	b.n	8003086 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f98b 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f99c 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0304 	and.w	r3, r3, #4
 8003092:	2b00      	cmp	r3, #0
 8003094:	d020      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0204 	mvn.w	r2, #4
 80030a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2202      	movs	r2, #2
 80030ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f973 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f965 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f976 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0308 	and.w	r3, r3, #8
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0308 	and.w	r3, r3, #8
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0208 	mvn.w	r2, #8
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2204      	movs	r2, #4
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f94d 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f93f 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f950 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0210 	mvn.w	r2, #16
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2208      	movs	r2, #8
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f927 	bl	80033aa <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f919 	bl	8003396 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f92a 	bl	80033be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0301 	and.w	r3, r3, #1
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0201 	mvn.w	r2, #1
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fd fcd8 	bl	8000b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00c      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 fab6 	bl	8003724 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d007      	beq.n	80031dc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f8fb 	bl	80033d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0320 	and.w	r3, r3, #32
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0220 	mvn.w	r2, #32
 80031f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 fa88 	bl	8003710 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003200:	bf00      	nop
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003212:	2300      	movs	r3, #0
 8003214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_TIM_ConfigClockSource+0x1c>
 8003220:	2302      	movs	r3, #2
 8003222:	e0b4      	b.n	800338e <HAL_TIM_ConfigClockSource+0x186>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800324a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800325c:	d03e      	beq.n	80032dc <HAL_TIM_ConfigClockSource+0xd4>
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003262:	f200 8087 	bhi.w	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800326a:	f000 8086 	beq.w	800337a <HAL_TIM_ConfigClockSource+0x172>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	d87f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003274:	2b70      	cmp	r3, #112	; 0x70
 8003276:	d01a      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0xa6>
 8003278:	2b70      	cmp	r3, #112	; 0x70
 800327a:	d87b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b60      	cmp	r3, #96	; 0x60
 800327e:	d050      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x11a>
 8003280:	2b60      	cmp	r3, #96	; 0x60
 8003282:	d877      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b50      	cmp	r3, #80	; 0x50
 8003286:	d03c      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0xfa>
 8003288:	2b50      	cmp	r3, #80	; 0x50
 800328a:	d873      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d058      	beq.n	8003342 <HAL_TIM_ConfigClockSource+0x13a>
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d86f      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b30      	cmp	r3, #48	; 0x30
 8003296:	d064      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 8003298:	2b30      	cmp	r3, #48	; 0x30
 800329a:	d86b      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d060      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	2b20      	cmp	r3, #32
 80032a2:	d867      	bhi.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05c      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	d05a      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x15a>
 80032ac:	e062      	b.n	8003374 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032be:	f000 f999 	bl	80035f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	609a      	str	r2, [r3, #8]
      break;
 80032da:	e04f      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ec:	f000 f982 	bl	80035f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032fe:	609a      	str	r2, [r3, #8]
      break;
 8003300:	e03c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	461a      	mov	r2, r3
 8003310:	f000 f8f6 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2150      	movs	r1, #80	; 0x50
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f94f 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8003320:	e02c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800332e:	461a      	mov	r2, r3
 8003330:	f000 f915 	bl	800355e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2160      	movs	r1, #96	; 0x60
 800333a:	4618      	mov	r0, r3
 800333c:	f000 f93f 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8003340:	e01c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800334e:	461a      	mov	r2, r3
 8003350:	f000 f8d6 	bl	8003500 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f92f 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8003360:	e00c      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4619      	mov	r1, r3
 800336c:	4610      	mov	r0, r2
 800336e:	f000 f926 	bl	80035be <TIM_ITRx_SetConfig>
      break;
 8003372:	e003      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	73fb      	strb	r3, [r7, #15]
      break;
 8003378:	e000      	b.n	800337c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800337a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800338c:	7bfb      	ldrb	r3, [r7, #15]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003396:	b480      	push	{r7}
 8003398:	b083      	sub	sp, #12
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033be:	b480      	push	{r7}
 80033c0:	b083      	sub	sp, #12
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c6:	bf00      	nop
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a3a      	ldr	r2, [pc, #232]	; (80034e4 <TIM_Base_SetConfig+0xfc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d00f      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003406:	d00b      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a37      	ldr	r2, [pc, #220]	; (80034e8 <TIM_Base_SetConfig+0x100>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d007      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a36      	ldr	r2, [pc, #216]	; (80034ec <TIM_Base_SetConfig+0x104>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d003      	beq.n	8003420 <TIM_Base_SetConfig+0x38>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a35      	ldr	r2, [pc, #212]	; (80034f0 <TIM_Base_SetConfig+0x108>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d108      	bne.n	8003432 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	4313      	orrs	r3, r2
 8003430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a2b      	ldr	r2, [pc, #172]	; (80034e4 <TIM_Base_SetConfig+0xfc>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01b      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003440:	d017      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a28      	ldr	r2, [pc, #160]	; (80034e8 <TIM_Base_SetConfig+0x100>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a27      	ldr	r2, [pc, #156]	; (80034ec <TIM_Base_SetConfig+0x104>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00f      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a26      	ldr	r2, [pc, #152]	; (80034f0 <TIM_Base_SetConfig+0x108>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00b      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a25      	ldr	r2, [pc, #148]	; (80034f4 <TIM_Base_SetConfig+0x10c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d007      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a24      	ldr	r2, [pc, #144]	; (80034f8 <TIM_Base_SetConfig+0x110>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d003      	beq.n	8003472 <TIM_Base_SetConfig+0x8a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a23      	ldr	r2, [pc, #140]	; (80034fc <TIM_Base_SetConfig+0x114>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d108      	bne.n	8003484 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003478:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <TIM_Base_SetConfig+0xfc>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d103      	bne.n	80034b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	691a      	ldr	r2, [r3, #16]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d105      	bne.n	80034d6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	f023 0201 	bic.w	r2, r3, #1
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	611a      	str	r2, [r3, #16]
  }
}
 80034d6:	bf00      	nop
 80034d8:	3714      	adds	r7, #20
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40014400 	.word	0x40014400
 80034fc:	40014800 	.word	0x40014800

08003500 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	f023 0201 	bic.w	r2, r3, #1
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800352a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f023 030a 	bic.w	r3, r3, #10
 800353c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800355e:	b480      	push	{r7}
 8003560:	b087      	sub	sp, #28
 8003562:	af00      	add	r7, sp, #0
 8003564:	60f8      	str	r0, [r7, #12]
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 0210 	bic.w	r2, r3, #16
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003588:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	031b      	lsls	r3, r3, #12
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800359a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	621a      	str	r2, [r3, #32]
}
 80035b2:	bf00      	nop
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035be:	b480      	push	{r7}
 80035c0:	b085      	sub	sp, #20
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	f043 0307 	orr.w	r3, r3, #7
 80035e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	609a      	str	r2, [r3, #8]
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800360e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	021a      	lsls	r2, r3, #8
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	431a      	orrs	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	609a      	str	r2, [r3, #8]
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003644:	2b01      	cmp	r3, #1
 8003646:	d101      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003648:	2302      	movs	r3, #2
 800364a:	e050      	b.n	80036ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a1c      	ldr	r2, [pc, #112]	; (80036fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d018      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003698:	d013      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00e      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a16      	ldr	r2, [pc, #88]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d009      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d004      	beq.n	80036c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10c      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	40010000 	.word	0x40010000
 8003700:	40000400 	.word	0x40000400
 8003704:	40000800 	.word	0x40000800
 8003708:	40000c00 	.word	0x40000c00
 800370c:	40014000 	.word	0x40014000

08003710 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <memset>:
 8003738:	4402      	add	r2, r0
 800373a:	4603      	mov	r3, r0
 800373c:	4293      	cmp	r3, r2
 800373e:	d100      	bne.n	8003742 <memset+0xa>
 8003740:	4770      	bx	lr
 8003742:	f803 1b01 	strb.w	r1, [r3], #1
 8003746:	e7f9      	b.n	800373c <memset+0x4>

08003748 <__libc_init_array>:
 8003748:	b570      	push	{r4, r5, r6, lr}
 800374a:	4d0d      	ldr	r5, [pc, #52]	; (8003780 <__libc_init_array+0x38>)
 800374c:	4c0d      	ldr	r4, [pc, #52]	; (8003784 <__libc_init_array+0x3c>)
 800374e:	1b64      	subs	r4, r4, r5
 8003750:	10a4      	asrs	r4, r4, #2
 8003752:	2600      	movs	r6, #0
 8003754:	42a6      	cmp	r6, r4
 8003756:	d109      	bne.n	800376c <__libc_init_array+0x24>
 8003758:	4d0b      	ldr	r5, [pc, #44]	; (8003788 <__libc_init_array+0x40>)
 800375a:	4c0c      	ldr	r4, [pc, #48]	; (800378c <__libc_init_array+0x44>)
 800375c:	f000 f818 	bl	8003790 <_init>
 8003760:	1b64      	subs	r4, r4, r5
 8003762:	10a4      	asrs	r4, r4, #2
 8003764:	2600      	movs	r6, #0
 8003766:	42a6      	cmp	r6, r4
 8003768:	d105      	bne.n	8003776 <__libc_init_array+0x2e>
 800376a:	bd70      	pop	{r4, r5, r6, pc}
 800376c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003770:	4798      	blx	r3
 8003772:	3601      	adds	r6, #1
 8003774:	e7ee      	b.n	8003754 <__libc_init_array+0xc>
 8003776:	f855 3b04 	ldr.w	r3, [r5], #4
 800377a:	4798      	blx	r3
 800377c:	3601      	adds	r6, #1
 800377e:	e7f2      	b.n	8003766 <__libc_init_array+0x1e>
 8003780:	080037c0 	.word	0x080037c0
 8003784:	080037c0 	.word	0x080037c0
 8003788:	080037c0 	.word	0x080037c0
 800378c:	080037c4 	.word	0x080037c4

08003790 <_init>:
 8003790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003792:	bf00      	nop
 8003794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003796:	bc08      	pop	{r3}
 8003798:	469e      	mov	lr, r3
 800379a:	4770      	bx	lr

0800379c <_fini>:
 800379c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800379e:	bf00      	nop
 80037a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037a2:	bc08      	pop	{r3}
 80037a4:	469e      	mov	lr, r3
 80037a6:	4770      	bx	lr
